
ahrs-stm32f429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003340  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080035e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000420  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000490  20000490  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010596  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002364  00000000  00000000  00030636  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007a68  00000000  00000000  0003299a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a00  00000000  00000000  0003a408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb8  00000000  00000000  0003ae08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005f89  00000000  00000000  0003bcc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000040f7  00000000  00000000  00041c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00045d40  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000025ec  00000000  00000000  00045dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080034d8 	.word	0x080034d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080034d8 	.word	0x080034d8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 fa30 	bl	8000a1c <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f9e4 	bl	8000998 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f9b5 	bl	8000974 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f001 fc10 	bl	8001e34 <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000098 	.word	0x20000098
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000098 	.word	0x20000098

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b538      	push	{r3, r4, r5, lr}
 8000642:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff fff6 	bl	8000634 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000648:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800064a:	bf1c      	itt	ne
 800064c:	4b05      	ldrne	r3, [pc, #20]	; (8000664 <HAL_Delay+0x24>)
 800064e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000650:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000652:	bf18      	it	ne
 8000654:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000656:	f7ff ffed 	bl	8000634 <HAL_GetTick>
 800065a:	1b40      	subs	r0, r0, r5
 800065c:	4284      	cmp	r4, r0
 800065e:	d8fa      	bhi.n	8000656 <HAL_Delay+0x16>
  {
  }
}
 8000660:	bd38      	pop	{r3, r4, r5, pc}
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000668:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800066a:	4604      	mov	r4, r0
 800066c:	2800      	cmp	r0, #0
 800066e:	d06e      	beq.n	800074e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000670:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000674:	b90b      	cbnz	r3, 800067a <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000676:	f001 fbf9 	bl	8001e6c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800067a:	6822      	ldr	r2, [r4, #0]
 800067c:	6813      	ldr	r3, [r2, #0]
 800067e:	f023 0302 	bic.w	r3, r3, #2
 8000682:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000684:	f7ff ffd6 	bl	8000634 <HAL_GetTick>
 8000688:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800068a:	6823      	ldr	r3, [r4, #0]
 800068c:	685a      	ldr	r2, [r3, #4]
 800068e:	0791      	lsls	r1, r2, #30
 8000690:	d451      	bmi.n	8000736 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	f042 0201 	orr.w	r2, r2, #1
 8000698:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800069a:	f7ff ffcb 	bl	8000634 <HAL_GetTick>
 800069e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006a0:	6823      	ldr	r3, [r4, #0]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	07d2      	lsls	r2, r2, #31
 80006a6:	d554      	bpl.n	8000752 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006a8:	7e22      	ldrb	r2, [r4, #24]
 80006aa:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	bf0c      	ite	eq
 80006b0:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006b4:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80006b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006ba:	7e62      	ldrb	r2, [r4, #25]
 80006bc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	bf0c      	ite	eq
 80006c2:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006c6:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80006ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006cc:	7ea2      	ldrb	r2, [r4, #26]
 80006ce:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	bf0c      	ite	eq
 80006d4:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006d8:	f022 0220 	bicne.w	r2, r2, #32
 80006dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80006de:	7ee2      	ldrb	r2, [r4, #27]
 80006e0:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	bf0c      	ite	eq
 80006e6:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006ea:	f042 0210 	orrne.w	r2, r2, #16
 80006ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80006f0:	7f22      	ldrb	r2, [r4, #28]
 80006f2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	bf0c      	ite	eq
 80006f8:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006fc:	f022 0208 	bicne.w	r2, r2, #8
 8000700:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000702:	7f62      	ldrb	r2, [r4, #29]
 8000704:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	bf0c      	ite	eq
 800070a:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800070e:	f022 0204 	bicne.w	r2, r2, #4
 8000712:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000714:	68e1      	ldr	r1, [r4, #12]
 8000716:	68a2      	ldr	r2, [r4, #8]
 8000718:	430a      	orrs	r2, r1
 800071a:	6921      	ldr	r1, [r4, #16]
 800071c:	430a      	orrs	r2, r1
 800071e:	6961      	ldr	r1, [r4, #20]
 8000720:	430a      	orrs	r2, r1
 8000722:	6861      	ldr	r1, [r4, #4]
 8000724:	3901      	subs	r1, #1
 8000726:	430a      	orrs	r2, r1
 8000728:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800072a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800072c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800072e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000730:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000734:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000736:	f7ff ff7d 	bl	8000634 <HAL_GetTick>
 800073a:	1b40      	subs	r0, r0, r5
 800073c:	280a      	cmp	r0, #10
 800073e:	d9a4      	bls.n	800068a <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000746:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000748:	2305      	movs	r3, #5
 800074a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800074e:	2001      	movs	r0, #1
}
 8000750:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000752:	f7ff ff6f 	bl	8000634 <HAL_GetTick>
 8000756:	1b40      	subs	r0, r0, r5
 8000758:	280a      	cmp	r0, #10
 800075a:	d9a1      	bls.n	80006a0 <HAL_CAN_Init+0x38>
 800075c:	e7f0      	b.n	8000740 <HAL_CAN_Init+0xd8>

0800075e <HAL_CAN_TxMailbox0CompleteCallback>:
 800075e:	4770      	bx	lr

08000760 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000760:	4770      	bx	lr

08000762 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000762:	4770      	bx	lr

08000764 <HAL_CAN_TxMailbox0AbortCallback>:
 8000764:	4770      	bx	lr

08000766 <HAL_CAN_TxMailbox1AbortCallback>:
 8000766:	4770      	bx	lr

08000768 <HAL_CAN_TxMailbox2AbortCallback>:
 8000768:	4770      	bx	lr

0800076a <HAL_CAN_RxFifo0MsgPendingCallback>:
 800076a:	4770      	bx	lr

0800076c <HAL_CAN_RxFifo0FullCallback>:
 800076c:	4770      	bx	lr

0800076e <HAL_CAN_RxFifo1MsgPendingCallback>:
 800076e:	4770      	bx	lr

08000770 <HAL_CAN_RxFifo1FullCallback>:
 8000770:	4770      	bx	lr

08000772 <HAL_CAN_SleepCallback>:
 8000772:	4770      	bx	lr

08000774 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000774:	4770      	bx	lr

08000776 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000776:	4770      	bx	lr

08000778 <HAL_CAN_IRQHandler>:
{
 8000778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800077c:	6803      	ldr	r3, [r0, #0]
 800077e:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000780:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000784:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000786:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800078a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800078e:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000792:	f016 0401 	ands.w	r4, r6, #1
{
 8000796:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000798:	d022      	beq.n	80007e0 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800079a:	f017 0401 	ands.w	r4, r7, #1
 800079e:	d007      	beq.n	80007b0 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80007a0:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80007a2:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80007a4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80007a6:	f140 80a3 	bpl.w	80008f0 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80007aa:	f7ff ffd8 	bl	800075e <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80007ae:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80007b0:	05fb      	lsls	r3, r7, #23
 80007b2:	d509      	bpl.n	80007c8 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80007b4:	682b      	ldr	r3, [r5, #0]
 80007b6:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80007ba:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80007bc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80007be:	f140 80a5 	bpl.w	800090c <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80007c2:	4628      	mov	r0, r5
 80007c4:	f7ff ffcc 	bl	8000760 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80007c8:	03fb      	lsls	r3, r7, #15
 80007ca:	d509      	bpl.n	80007e0 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80007cc:	682b      	ldr	r3, [r5, #0]
 80007ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80007d2:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80007d4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80007d6:	f140 80a7 	bpl.w	8000928 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80007da:	4628      	mov	r0, r5
 80007dc:	f7ff ffc1 	bl	8000762 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80007e0:	0733      	lsls	r3, r6, #28
 80007e2:	d507      	bpl.n	80007f4 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80007e4:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80007e8:	bf1f      	itttt	ne
 80007ea:	682b      	ldrne	r3, [r5, #0]
 80007ec:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80007ee:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80007f2:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80007f4:	0777      	lsls	r7, r6, #29
 80007f6:	d508      	bpl.n	800080a <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80007f8:	f01b 0f08 	tst.w	fp, #8
 80007fc:	d005      	beq.n	800080a <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80007fe:	682b      	ldr	r3, [r5, #0]
 8000800:	2208      	movs	r2, #8
 8000802:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000804:	4628      	mov	r0, r5
 8000806:	f7ff ffb1 	bl	800076c <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800080a:	07b0      	lsls	r0, r6, #30
 800080c:	d506      	bpl.n	800081c <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800080e:	682b      	ldr	r3, [r5, #0]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	0799      	lsls	r1, r3, #30
 8000814:	d002      	beq.n	800081c <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000816:	4628      	mov	r0, r5
 8000818:	f7ff ffa7 	bl	800076a <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800081c:	0672      	lsls	r2, r6, #25
 800081e:	d507      	bpl.n	8000830 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000820:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000824:	bf1f      	itttt	ne
 8000826:	682b      	ldrne	r3, [r5, #0]
 8000828:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800082a:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800082e:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000830:	06b3      	lsls	r3, r6, #26
 8000832:	d508      	bpl.n	8000846 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000834:	f01a 0f08 	tst.w	sl, #8
 8000838:	d005      	beq.n	8000846 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800083a:	682b      	ldr	r3, [r5, #0]
 800083c:	2208      	movs	r2, #8
 800083e:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000840:	4628      	mov	r0, r5
 8000842:	f7ff ff95 	bl	8000770 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000846:	06f7      	lsls	r7, r6, #27
 8000848:	d506      	bpl.n	8000858 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800084a:	682b      	ldr	r3, [r5, #0]
 800084c:	691b      	ldr	r3, [r3, #16]
 800084e:	0798      	lsls	r0, r3, #30
 8000850:	d002      	beq.n	8000858 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000852:	4628      	mov	r0, r5
 8000854:	f7ff ff8b 	bl	800076e <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000858:	03b1      	lsls	r1, r6, #14
 800085a:	d508      	bpl.n	800086e <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800085c:	f019 0f10 	tst.w	r9, #16
 8000860:	d005      	beq.n	800086e <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000862:	682b      	ldr	r3, [r5, #0]
 8000864:	2210      	movs	r2, #16
 8000866:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000868:	4628      	mov	r0, r5
 800086a:	f7ff ff82 	bl	8000772 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800086e:	03f2      	lsls	r2, r6, #15
 8000870:	d508      	bpl.n	8000884 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000872:	f019 0f08 	tst.w	r9, #8
 8000876:	d005      	beq.n	8000884 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000878:	682b      	ldr	r3, [r5, #0]
 800087a:	2208      	movs	r2, #8
 800087c:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800087e:	4628      	mov	r0, r5
 8000880:	f7ff ff78 	bl	8000774 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000884:	0433      	lsls	r3, r6, #16
 8000886:	d52a      	bpl.n	80008de <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000888:	f019 0f04 	tst.w	r9, #4
 800088c:	682a      	ldr	r2, [r5, #0]
 800088e:	d024      	beq.n	80008da <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000890:	05f7      	lsls	r7, r6, #23
 8000892:	d504      	bpl.n	800089e <HAL_CAN_IRQHandler+0x126>
 8000894:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000898:	bf18      	it	ne
 800089a:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800089e:	05b0      	lsls	r0, r6, #22
 80008a0:	d504      	bpl.n	80008ac <HAL_CAN_IRQHandler+0x134>
 80008a2:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 80008a6:	bf18      	it	ne
 80008a8:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80008ac:	0571      	lsls	r1, r6, #21
 80008ae:	d504      	bpl.n	80008ba <HAL_CAN_IRQHandler+0x142>
 80008b0:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80008b4:	bf18      	it	ne
 80008b6:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80008ba:	0533      	lsls	r3, r6, #20
 80008bc:	d50d      	bpl.n	80008da <HAL_CAN_IRQHandler+0x162>
 80008be:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 80008c2:	d00a      	beq.n	80008da <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 80008c4:	2b30      	cmp	r3, #48	; 0x30
 80008c6:	d04c      	beq.n	8000962 <HAL_CAN_IRQHandler+0x1ea>
 80008c8:	d83c      	bhi.n	8000944 <HAL_CAN_IRQHandler+0x1cc>
 80008ca:	2b10      	cmp	r3, #16
 80008cc:	d043      	beq.n	8000956 <HAL_CAN_IRQHandler+0x1de>
 80008ce:	2b20      	cmp	r3, #32
 80008d0:	d044      	beq.n	800095c <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80008d2:	6993      	ldr	r3, [r2, #24]
 80008d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008d8:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80008da:	2304      	movs	r3, #4
 80008dc:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80008de:	b12c      	cbz	r4, 80008ec <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 80008e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80008e2:	431c      	orrs	r4, r3
 80008e4:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80008e6:	4628      	mov	r0, r5
 80008e8:	f7ff ff45 	bl	8000776 <HAL_CAN_ErrorCallback>
 80008ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80008f0:	077a      	lsls	r2, r7, #29
 80008f2:	d405      	bmi.n	8000900 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80008f4:	f017 0408 	ands.w	r4, r7, #8
 80008f8:	d105      	bne.n	8000906 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80008fa:	f7ff ff33 	bl	8000764 <HAL_CAN_TxMailbox0AbortCallback>
 80008fe:	e757      	b.n	80007b0 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000900:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000904:	e754      	b.n	80007b0 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000906:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800090a:	e751      	b.n	80007b0 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800090c:	0579      	lsls	r1, r7, #21
 800090e:	d502      	bpl.n	8000916 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000910:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000914:	e758      	b.n	80007c8 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000916:	053a      	lsls	r2, r7, #20
 8000918:	d502      	bpl.n	8000920 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800091a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800091e:	e753      	b.n	80007c8 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000920:	4628      	mov	r0, r5
 8000922:	f7ff ff20 	bl	8000766 <HAL_CAN_TxMailbox1AbortCallback>
 8000926:	e74f      	b.n	80007c8 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000928:	0379      	lsls	r1, r7, #13
 800092a:	d502      	bpl.n	8000932 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800092c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000930:	e756      	b.n	80007e0 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000932:	033a      	lsls	r2, r7, #12
 8000934:	d502      	bpl.n	800093c <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000936:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800093a:	e751      	b.n	80007e0 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800093c:	4628      	mov	r0, r5
 800093e:	f7ff ff13 	bl	8000768 <HAL_CAN_TxMailbox2AbortCallback>
 8000942:	e74d      	b.n	80007e0 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000944:	2b50      	cmp	r3, #80	; 0x50
 8000946:	d00f      	beq.n	8000968 <HAL_CAN_IRQHandler+0x1f0>
 8000948:	2b60      	cmp	r3, #96	; 0x60
 800094a:	d010      	beq.n	800096e <HAL_CAN_IRQHandler+0x1f6>
 800094c:	2b40      	cmp	r3, #64	; 0x40
 800094e:	d1c0      	bne.n	80008d2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000950:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000954:	e7bd      	b.n	80008d2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000956:	f044 0408 	orr.w	r4, r4, #8
            break;
 800095a:	e7ba      	b.n	80008d2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800095c:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000960:	e7b7      	b.n	80008d2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000962:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000966:	e7b4      	b.n	80008d2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000968:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 800096c:	e7b1      	b.n	80008d2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800096e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000972:	e7ae      	b.n	80008d2 <HAL_CAN_IRQHandler+0x15a>

08000974 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000976:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000978:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800097c:	041b      	lsls	r3, r3, #16
 800097e:	0c1b      	lsrs	r3, r3, #16
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	0200      	lsls	r0, r0, #8
 8000986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800098e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000990:	60d3      	str	r3, [r2, #12]
 8000992:	4770      	bx	lr
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800099a:	b530      	push	{r4, r5, lr}
 800099c:	68dc      	ldr	r4, [r3, #12]
 800099e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	bf28      	it	cs
 80009ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	f04f 0501 	mov.w	r5, #1
 80009b4:	fa05 f303 	lsl.w	r3, r5, r3
 80009b8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009bc:	bf8c      	ite	hi
 80009be:	3c03      	subhi	r4, #3
 80009c0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c2:	4019      	ands	r1, r3
 80009c4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c6:	fa05 f404 	lsl.w	r4, r5, r4
 80009ca:	3c01      	subs	r4, #1
 80009cc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80009ce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	ea42 0201 	orr.w	r2, r2, r1
 80009d4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	bfad      	iteet	ge
 80009da:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	f000 000f 	andlt.w	r0, r0, #15
 80009e2:	4b06      	ldrlt	r3, [pc, #24]	; (80009fc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e8:	bfb5      	itete	lt
 80009ea:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80009f4:	bd30      	pop	{r4, r5, pc}
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00
 80009fc:	e000ed14 	.word	0xe000ed14

08000a00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a00:	2800      	cmp	r0, #0
 8000a02:	db08      	blt.n	8000a16 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a04:	0942      	lsrs	r2, r0, #5
 8000a06:	2301      	movs	r3, #1
 8000a08:	f000 001f 	and.w	r0, r0, #31
 8000a0c:	fa03 f000 	lsl.w	r0, r3, r0
 8000a10:	4b01      	ldr	r3, [pc, #4]	; (8000a18 <HAL_NVIC_EnableIRQ+0x18>)
 8000a12:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a16:	4770      	bx	lr
 8000a18:	e000e100 	.word	0xe000e100

08000a1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a1c:	3801      	subs	r0, #1
 8000a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a22:	d20a      	bcs.n	8000a3a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a28:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	21f0      	movs	r1, #240	; 0xf0
 8000a2c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a30:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a32:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a3a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e010 	.word	0xe000e010
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a4c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a4e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a50:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000c18 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a54:	4a6e      	ldr	r2, [pc, #440]	; (8000c10 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a56:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000c1c <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a5a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a5c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000a5e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a62:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000a64:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a68:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000a6c:	45b6      	cmp	lr, r6
 8000a6e:	f040 80b6 	bne.w	8000bde <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a72:	684c      	ldr	r4, [r1, #4]
 8000a74:	f024 0710 	bic.w	r7, r4, #16
 8000a78:	2f02      	cmp	r7, #2
 8000a7a:	d116      	bne.n	8000aaa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000a7c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000a80:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a84:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000a88:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a8c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a90:	f04f 0c0f 	mov.w	ip, #15
 8000a94:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000a98:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a9c:	690d      	ldr	r5, [r1, #16]
 8000a9e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000aa2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000aa6:	f8ca 5020 	str.w	r5, [sl, #32]
 8000aaa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000aae:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000ab0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ab4:	fa05 f50a 	lsl.w	r5, r5, sl
 8000ab8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aba:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000abe:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ac2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ac8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000acc:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000ace:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad2:	d811      	bhi.n	8000af8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ad4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ad6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ada:	68cf      	ldr	r7, [r1, #12]
 8000adc:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ae0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ae4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ae6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ae8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000aec:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000af0:	409f      	lsls	r7, r3
 8000af2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000af6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000af8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000afa:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000afc:	688f      	ldr	r7, [r1, #8]
 8000afe:	fa07 f70a 	lsl.w	r7, r7, sl
 8000b02:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000b04:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b06:	00e5      	lsls	r5, r4, #3
 8000b08:	d569      	bpl.n	8000bde <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	f04f 0b00 	mov.w	fp, #0
 8000b0e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b12:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b16:	4d3f      	ldr	r5, [pc, #252]	; (8000c14 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b18:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000b1c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000b20:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000b24:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000b28:	9703      	str	r7, [sp, #12]
 8000b2a:	9f03      	ldr	r7, [sp, #12]
 8000b2c:	f023 0703 	bic.w	r7, r3, #3
 8000b30:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b34:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b38:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b3c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b40:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b44:	f04f 0e0f 	mov.w	lr, #15
 8000b48:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b4c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b4e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b52:	d04b      	beq.n	8000bec <HAL_GPIO_Init+0x1a4>
 8000b54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b58:	42a8      	cmp	r0, r5
 8000b5a:	d049      	beq.n	8000bf0 <HAL_GPIO_Init+0x1a8>
 8000b5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b60:	42a8      	cmp	r0, r5
 8000b62:	d047      	beq.n	8000bf4 <HAL_GPIO_Init+0x1ac>
 8000b64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b68:	42a8      	cmp	r0, r5
 8000b6a:	d045      	beq.n	8000bf8 <HAL_GPIO_Init+0x1b0>
 8000b6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b70:	42a8      	cmp	r0, r5
 8000b72:	d043      	beq.n	8000bfc <HAL_GPIO_Init+0x1b4>
 8000b74:	4548      	cmp	r0, r9
 8000b76:	d043      	beq.n	8000c00 <HAL_GPIO_Init+0x1b8>
 8000b78:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000b7c:	42a8      	cmp	r0, r5
 8000b7e:	d041      	beq.n	8000c04 <HAL_GPIO_Init+0x1bc>
 8000b80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b84:	42a8      	cmp	r0, r5
 8000b86:	d03f      	beq.n	8000c08 <HAL_GPIO_Init+0x1c0>
 8000b88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b8c:	42a8      	cmp	r0, r5
 8000b8e:	d03d      	beq.n	8000c0c <HAL_GPIO_Init+0x1c4>
 8000b90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b94:	42a8      	cmp	r0, r5
 8000b96:	bf14      	ite	ne
 8000b98:	250a      	movne	r5, #10
 8000b9a:	2509      	moveq	r5, #9
 8000b9c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000ba0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ba4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000ba6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ba8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000baa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000bae:	bf0c      	ite	eq
 8000bb0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bb2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000bb4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000bb6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000bbc:	bf0c      	ite	eq
 8000bbe:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bc0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000bc2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000bca:	bf0c      	ite	eq
 8000bcc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bce:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000bd0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000bd2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bd4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000bd6:	bf54      	ite	pl
 8000bd8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000bda:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000bdc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bde:	3301      	adds	r3, #1
 8000be0:	2b10      	cmp	r3, #16
 8000be2:	f47f af3c 	bne.w	8000a5e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000be6:	b005      	add	sp, #20
 8000be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bec:	465d      	mov	r5, fp
 8000bee:	e7d5      	b.n	8000b9c <HAL_GPIO_Init+0x154>
 8000bf0:	2501      	movs	r5, #1
 8000bf2:	e7d3      	b.n	8000b9c <HAL_GPIO_Init+0x154>
 8000bf4:	2502      	movs	r5, #2
 8000bf6:	e7d1      	b.n	8000b9c <HAL_GPIO_Init+0x154>
 8000bf8:	2503      	movs	r5, #3
 8000bfa:	e7cf      	b.n	8000b9c <HAL_GPIO_Init+0x154>
 8000bfc:	2504      	movs	r5, #4
 8000bfe:	e7cd      	b.n	8000b9c <HAL_GPIO_Init+0x154>
 8000c00:	2505      	movs	r5, #5
 8000c02:	e7cb      	b.n	8000b9c <HAL_GPIO_Init+0x154>
 8000c04:	2506      	movs	r5, #6
 8000c06:	e7c9      	b.n	8000b9c <HAL_GPIO_Init+0x154>
 8000c08:	2507      	movs	r5, #7
 8000c0a:	e7c7      	b.n	8000b9c <HAL_GPIO_Init+0x154>
 8000c0c:	2508      	movs	r5, #8
 8000c0e:	e7c5      	b.n	8000b9c <HAL_GPIO_Init+0x154>
 8000c10:	40013c00 	.word	0x40013c00
 8000c14:	40020000 	.word	0x40020000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40021400 	.word	0x40021400

08000c20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c20:	b10a      	cbz	r2, 8000c26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c22:	6181      	str	r1, [r0, #24]
 8000c24:	4770      	bx	lr
 8000c26:	0409      	lsls	r1, r1, #16
 8000c28:	e7fb      	b.n	8000c22 <HAL_GPIO_WritePin+0x2>
	...

08000c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c2c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c2e:	4604      	mov	r4, r0
 8000c30:	b908      	cbnz	r0, 8000c36 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8000c32:	2001      	movs	r0, #1
 8000c34:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c3e:	b91b      	cbnz	r3, 8000c48 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c44:	f001 f968 	bl	8001f18 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c48:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c4a:	2324      	movs	r3, #36	; 0x24
 8000c4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000c50:	6813      	ldr	r3, [r2, #0]
 8000c52:	f023 0301 	bic.w	r3, r3, #1
 8000c56:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c58:	f000 fb14 	bl	8001284 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c5c:	6865      	ldr	r5, [r4, #4]
 8000c5e:	4b41      	ldr	r3, [pc, #260]	; (8000d64 <HAL_I2C_Init+0x138>)
 8000c60:	429d      	cmp	r5, r3
 8000c62:	d84d      	bhi.n	8000d00 <HAL_I2C_Init+0xd4>
 8000c64:	4b40      	ldr	r3, [pc, #256]	; (8000d68 <HAL_I2C_Init+0x13c>)
 8000c66:	4298      	cmp	r0, r3
 8000c68:	d9e3      	bls.n	8000c32 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c6a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000c6c:	493f      	ldr	r1, [pc, #252]	; (8000d6c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c6e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000c70:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c7c:	6a13      	ldr	r3, [r2, #32]
 8000c7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c82:	3101      	adds	r1, #1
 8000c84:	4319      	orrs	r1, r3
 8000c86:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c88:	69d1      	ldr	r1, [r2, #28]
 8000c8a:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <HAL_I2C_Init+0x138>)
 8000c8c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000c90:	429d      	cmp	r5, r3
 8000c92:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000c96:	f100 30ff 	add.w	r0, r0, #4294967295
 8000c9a:	d848      	bhi.n	8000d2e <HAL_I2C_Init+0x102>
 8000c9c:	006d      	lsls	r5, r5, #1
 8000c9e:	fbb0 f0f5 	udiv	r0, r0, r5
 8000ca2:	3001      	adds	r0, #1
 8000ca4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	bf38      	it	cc
 8000cac:	2304      	movcc	r3, #4
 8000cae:	430b      	orrs	r3, r1
 8000cb0:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000cb2:	6811      	ldr	r1, [r2, #0]
 8000cb4:	6a20      	ldr	r0, [r4, #32]
 8000cb6:	69e3      	ldr	r3, [r4, #28]
 8000cb8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000cbc:	4303      	orrs	r3, r0
 8000cbe:	430b      	orrs	r3, r1
 8000cc0:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000cc2:	6891      	ldr	r1, [r2, #8]
 8000cc4:	68e0      	ldr	r0, [r4, #12]
 8000cc6:	6923      	ldr	r3, [r4, #16]
 8000cc8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000ccc:	4303      	orrs	r3, r0
 8000cce:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000cd2:	430b      	orrs	r3, r1
 8000cd4:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000cd6:	68d1      	ldr	r1, [r2, #12]
 8000cd8:	69a0      	ldr	r0, [r4, #24]
 8000cda:	6963      	ldr	r3, [r4, #20]
 8000cdc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000ce0:	4303      	orrs	r3, r0
 8000ce2:	430b      	orrs	r3, r1
 8000ce4:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ce6:	6813      	ldr	r3, [r2, #0]
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cee:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000cf0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cf2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000cf4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cf8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cfa:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000cfe:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_I2C_Init+0x144>)
 8000d02:	4298      	cmp	r0, r3
 8000d04:	d995      	bls.n	8000c32 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d06:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000d08:	4e18      	ldr	r6, [pc, #96]	; (8000d6c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d0a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000d0c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d14:	4333      	orrs	r3, r6
 8000d16:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d18:	6a13      	ldr	r3, [r2, #32]
 8000d1a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d1e:	4371      	muls	r1, r6
 8000d20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d24:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000d28:	fbb1 f1f6 	udiv	r1, r1, r6
 8000d2c:	e7a9      	b.n	8000c82 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d2e:	68a3      	ldr	r3, [r4, #8]
 8000d30:	b953      	cbnz	r3, 8000d48 <HAL_I2C_Init+0x11c>
 8000d32:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000d36:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d3a:	1c43      	adds	r3, r0, #1
 8000d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d40:	b16b      	cbz	r3, 8000d5e <HAL_I2C_Init+0x132>
 8000d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d46:	e7b2      	b.n	8000cae <HAL_I2C_Init+0x82>
 8000d48:	2319      	movs	r3, #25
 8000d4a:	436b      	muls	r3, r5
 8000d4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d50:	1c43      	adds	r3, r0, #1
 8000d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d56:	b113      	cbz	r3, 8000d5e <HAL_I2C_Init+0x132>
 8000d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d5c:	e7a7      	b.n	8000cae <HAL_I2C_Init+0x82>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e7a5      	b.n	8000cae <HAL_I2C_Init+0x82>
 8000d62:	bf00      	nop
 8000d64:	000186a0 	.word	0x000186a0
 8000d68:	001e847f 	.word	0x001e847f
 8000d6c:	000f4240 	.word	0x000f4240
 8000d70:	003d08ff 	.word	0x003d08ff

08000d74 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d74:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	2a20      	cmp	r2, #32
{
 8000d7c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d7e:	d116      	bne.n	8000dae <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d80:	2324      	movs	r3, #36	; 0x24
 8000d82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d86:	6803      	ldr	r3, [r0, #0]
 8000d88:	681c      	ldr	r4, [r3, #0]
 8000d8a:	f024 0401 	bic.w	r4, r4, #1
 8000d8e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8000d90:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000d92:	f024 0410 	bic.w	r4, r4, #16
 8000d96:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8000d98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000d9a:	4321      	orrs	r1, r4
 8000d9c:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8000d9e:	6819      	ldr	r1, [r3, #0]
 8000da0:	f041 0101 	orr.w	r1, r1, #1
 8000da4:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000da6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 8000daa:	2000      	movs	r0, #0
 8000dac:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000dae:	2002      	movs	r0, #2
  }
}
 8000db0:	bd10      	pop	{r4, pc}

08000db2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000db2:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000db4:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8000db8:	b2e4      	uxtb	r4, r4
 8000dba:	2c20      	cmp	r4, #32
 8000dbc:	d116      	bne.n	8000dec <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000dbe:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000dc0:	2324      	movs	r3, #36	; 0x24
 8000dc2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8000dc6:	6815      	ldr	r5, [r2, #0]
 8000dc8:	f025 0501 	bic.w	r5, r5, #1
 8000dcc:	6015      	str	r5, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8000dce:	6a55      	ldr	r5, [r2, #36]	; 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8000dd0:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000dd4:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8000dd6:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	6253      	str	r3, [r2, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8000ddc:	6813      	ldr	r3, [r2, #0]
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000de4:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 8000de8:	2000      	movs	r0, #0
 8000dea:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 8000dec:	2002      	movs	r0, #2
  }
}
 8000dee:	bd30      	pop	{r4, r5, pc}

08000df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000df4:	4604      	mov	r4, r0
 8000df6:	b918      	cbnz	r0, 8000e00 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000df8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000dfa:	b002      	add	sp, #8
 8000dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e00:	6803      	ldr	r3, [r0, #0]
 8000e02:	07dd      	lsls	r5, r3, #31
 8000e04:	d410      	bmi.n	8000e28 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	0798      	lsls	r0, r3, #30
 8000e0a:	d458      	bmi.n	8000ebe <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	071a      	lsls	r2, r3, #28
 8000e10:	f100 809a 	bmi.w	8000f48 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	075b      	lsls	r3, r3, #29
 8000e18:	f100 80b8 	bmi.w	8000f8c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e1c:	69a2      	ldr	r2, [r4, #24]
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	f040 8119 	bne.w	8001056 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000e24:	2000      	movs	r0, #0
 8000e26:	e7e8      	b.n	8000dfa <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e28:	4ba6      	ldr	r3, [pc, #664]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	f002 020c 	and.w	r2, r2, #12
 8000e30:	2a04      	cmp	r2, #4
 8000e32:	d007      	beq.n	8000e44 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e3a:	2a08      	cmp	r2, #8
 8000e3c:	d10a      	bne.n	8000e54 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	0259      	lsls	r1, r3, #9
 8000e42:	d507      	bpl.n	8000e54 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e44:	4b9f      	ldr	r3, [pc, #636]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	039a      	lsls	r2, r3, #14
 8000e4a:	d5dc      	bpl.n	8000e06 <HAL_RCC_OscConfig+0x16>
 8000e4c:	6863      	ldr	r3, [r4, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1d9      	bne.n	8000e06 <HAL_RCC_OscConfig+0x16>
 8000e52:	e7d1      	b.n	8000df8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e54:	6863      	ldr	r3, [r4, #4]
 8000e56:	4d9b      	ldr	r5, [pc, #620]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
 8000e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e5c:	d111      	bne.n	8000e82 <HAL_RCC_OscConfig+0x92>
 8000e5e:	682b      	ldr	r3, [r5, #0]
 8000e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e66:	f7ff fbe5 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6a:	4d96      	ldr	r5, [pc, #600]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000e6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6e:	682b      	ldr	r3, [r5, #0]
 8000e70:	039b      	lsls	r3, r3, #14
 8000e72:	d4c8      	bmi.n	8000e06 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e74:	f7ff fbde 	bl	8000634 <HAL_GetTick>
 8000e78:	1b80      	subs	r0, r0, r6
 8000e7a:	2864      	cmp	r0, #100	; 0x64
 8000e7c:	d9f7      	bls.n	8000e6e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000e7e:	2003      	movs	r0, #3
 8000e80:	e7bb      	b.n	8000dfa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e86:	d104      	bne.n	8000e92 <HAL_RCC_OscConfig+0xa2>
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8e:	602b      	str	r3, [r5, #0]
 8000e90:	e7e5      	b.n	8000e5e <HAL_RCC_OscConfig+0x6e>
 8000e92:	682a      	ldr	r2, [r5, #0]
 8000e94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e98:	602a      	str	r2, [r5, #0]
 8000e9a:	682a      	ldr	r2, [r5, #0]
 8000e9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ea0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1df      	bne.n	8000e66 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000ea6:	f7ff fbc5 	bl	8000634 <HAL_GetTick>
 8000eaa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eac:	682b      	ldr	r3, [r5, #0]
 8000eae:	039f      	lsls	r7, r3, #14
 8000eb0:	d5a9      	bpl.n	8000e06 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb2:	f7ff fbbf 	bl	8000634 <HAL_GetTick>
 8000eb6:	1b80      	subs	r0, r0, r6
 8000eb8:	2864      	cmp	r0, #100	; 0x64
 8000eba:	d9f7      	bls.n	8000eac <HAL_RCC_OscConfig+0xbc>
 8000ebc:	e7df      	b.n	8000e7e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ebe:	4b81      	ldr	r3, [pc, #516]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	f012 0f0c 	tst.w	r2, #12
 8000ec6:	d007      	beq.n	8000ed8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ece:	2a08      	cmp	r2, #8
 8000ed0:	d111      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	025e      	lsls	r6, r3, #9
 8000ed6:	d40e      	bmi.n	8000ef6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed8:	4b7a      	ldr	r3, [pc, #488]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	0795      	lsls	r5, r2, #30
 8000ede:	d502      	bpl.n	8000ee6 <HAL_RCC_OscConfig+0xf6>
 8000ee0:	68e2      	ldr	r2, [r4, #12]
 8000ee2:	2a01      	cmp	r2, #1
 8000ee4:	d188      	bne.n	8000df8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	6921      	ldr	r1, [r4, #16]
 8000eea:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000eee:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000ef2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef4:	e78a      	b.n	8000e0c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ef6:	68e2      	ldr	r2, [r4, #12]
 8000ef8:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <HAL_RCC_OscConfig+0x2d8>)
 8000efa:	b1b2      	cbz	r2, 8000f2a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000efc:	2201      	movs	r2, #1
 8000efe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f00:	f7ff fb98 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f04:	4d6f      	ldr	r5, [pc, #444]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000f06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	0798      	lsls	r0, r3, #30
 8000f0c:	d507      	bpl.n	8000f1e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0e:	682b      	ldr	r3, [r5, #0]
 8000f10:	6922      	ldr	r2, [r4, #16]
 8000f12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f16:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f1a:	602b      	str	r3, [r5, #0]
 8000f1c:	e776      	b.n	8000e0c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f1e:	f7ff fb89 	bl	8000634 <HAL_GetTick>
 8000f22:	1b80      	subs	r0, r0, r6
 8000f24:	2802      	cmp	r0, #2
 8000f26:	d9ef      	bls.n	8000f08 <HAL_RCC_OscConfig+0x118>
 8000f28:	e7a9      	b.n	8000e7e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000f2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fb82 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f30:	4d64      	ldr	r5, [pc, #400]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000f32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f34:	682b      	ldr	r3, [r5, #0]
 8000f36:	0799      	lsls	r1, r3, #30
 8000f38:	f57f af68 	bpl.w	8000e0c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fb7a 	bl	8000634 <HAL_GetTick>
 8000f40:	1b80      	subs	r0, r0, r6
 8000f42:	2802      	cmp	r0, #2
 8000f44:	d9f6      	bls.n	8000f34 <HAL_RCC_OscConfig+0x144>
 8000f46:	e79a      	b.n	8000e7e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f48:	6962      	ldr	r2, [r4, #20]
 8000f4a:	4b60      	ldr	r3, [pc, #384]	; (80010cc <HAL_RCC_OscConfig+0x2dc>)
 8000f4c:	b17a      	cbz	r2, 8000f6e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f52:	f7ff fb6f 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f56:	4d5b      	ldr	r5, [pc, #364]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000f58:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f5a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f5c:	079f      	lsls	r7, r3, #30
 8000f5e:	f53f af59 	bmi.w	8000e14 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f62:	f7ff fb67 	bl	8000634 <HAL_GetTick>
 8000f66:	1b80      	subs	r0, r0, r6
 8000f68:	2802      	cmp	r0, #2
 8000f6a:	d9f6      	bls.n	8000f5a <HAL_RCC_OscConfig+0x16a>
 8000f6c:	e787      	b.n	8000e7e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000f6e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f70:	f7ff fb60 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f74:	4d53      	ldr	r5, [pc, #332]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000f76:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f78:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f7a:	0798      	lsls	r0, r3, #30
 8000f7c:	f57f af4a 	bpl.w	8000e14 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f80:	f7ff fb58 	bl	8000634 <HAL_GetTick>
 8000f84:	1b80      	subs	r0, r0, r6
 8000f86:	2802      	cmp	r0, #2
 8000f88:	d9f6      	bls.n	8000f78 <HAL_RCC_OscConfig+0x188>
 8000f8a:	e778      	b.n	8000e7e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f8c:	4b4d      	ldr	r3, [pc, #308]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
 8000f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f90:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000f94:	d128      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	9201      	str	r2, [sp, #4]
 8000f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000faa:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fac:	4d48      	ldr	r5, [pc, #288]	; (80010d0 <HAL_RCC_OscConfig+0x2e0>)
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	05d9      	lsls	r1, r3, #23
 8000fb2:	d51b      	bpl.n	8000fec <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb4:	68a3      	ldr	r3, [r4, #8]
 8000fb6:	4d43      	ldr	r5, [pc, #268]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d127      	bne.n	800100c <HAL_RCC_OscConfig+0x21c>
 8000fbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fb36 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc8:	4d3e      	ldr	r5, [pc, #248]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000fca:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fcc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fd2:	079b      	lsls	r3, r3, #30
 8000fd4:	d539      	bpl.n	800104a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000fd6:	2e00      	cmp	r6, #0
 8000fd8:	f43f af20 	beq.w	8000e1c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fdc:	4a39      	ldr	r2, [pc, #228]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
 8000fde:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	e719      	b.n	8000e1c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000fe8:	2600      	movs	r6, #0
 8000fea:	e7df      	b.n	8000fac <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fec:	682b      	ldr	r3, [r5, #0]
 8000fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ff4:	f7ff fb1e 	bl	8000634 <HAL_GetTick>
 8000ff8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ffa:	682b      	ldr	r3, [r5, #0]
 8000ffc:	05da      	lsls	r2, r3, #23
 8000ffe:	d4d9      	bmi.n	8000fb4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001000:	f7ff fb18 	bl	8000634 <HAL_GetTick>
 8001004:	1bc0      	subs	r0, r0, r7
 8001006:	2802      	cmp	r0, #2
 8001008:	d9f7      	bls.n	8000ffa <HAL_RCC_OscConfig+0x20a>
 800100a:	e738      	b.n	8000e7e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100c:	2b05      	cmp	r3, #5
 800100e:	d104      	bne.n	800101a <HAL_RCC_OscConfig+0x22a>
 8001010:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001012:	f043 0304 	orr.w	r3, r3, #4
 8001016:	672b      	str	r3, [r5, #112]	; 0x70
 8001018:	e7d0      	b.n	8000fbc <HAL_RCC_OscConfig+0x1cc>
 800101a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800101c:	f022 0201 	bic.w	r2, r2, #1
 8001020:	672a      	str	r2, [r5, #112]	; 0x70
 8001022:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001024:	f022 0204 	bic.w	r2, r2, #4
 8001028:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1ca      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800102e:	f7ff fb01 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001032:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001036:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001038:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800103a:	0798      	lsls	r0, r3, #30
 800103c:	d5cb      	bpl.n	8000fd6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800103e:	f7ff faf9 	bl	8000634 <HAL_GetTick>
 8001042:	1bc0      	subs	r0, r0, r7
 8001044:	4540      	cmp	r0, r8
 8001046:	d9f7      	bls.n	8001038 <HAL_RCC_OscConfig+0x248>
 8001048:	e719      	b.n	8000e7e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f7ff faf3 	bl	8000634 <HAL_GetTick>
 800104e:	1bc0      	subs	r0, r0, r7
 8001050:	4540      	cmp	r0, r8
 8001052:	d9bd      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x1e0>
 8001054:	e713      	b.n	8000e7e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001056:	4d1b      	ldr	r5, [pc, #108]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
 8001058:	68ab      	ldr	r3, [r5, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b08      	cmp	r3, #8
 8001060:	f43f aeca 	beq.w	8000df8 <HAL_RCC_OscConfig+0x8>
 8001064:	4e1b      	ldr	r6, [pc, #108]	; (80010d4 <HAL_RCC_OscConfig+0x2e4>)
 8001066:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001068:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800106a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800106c:	d134      	bne.n	80010d8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800106e:	f7ff fae1 	bl	8000634 <HAL_GetTick>
 8001072:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001074:	682b      	ldr	r3, [r5, #0]
 8001076:	0199      	lsls	r1, r3, #6
 8001078:	d41e      	bmi.n	80010b8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800107a:	6a22      	ldr	r2, [r4, #32]
 800107c:	69e3      	ldr	r3, [r4, #28]
 800107e:	4313      	orrs	r3, r2
 8001080:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001082:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001086:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001088:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800108c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108e:	4c0d      	ldr	r4, [pc, #52]	; (80010c4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001090:	0852      	lsrs	r2, r2, #1
 8001092:	3a01      	subs	r2, #1
 8001094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001098:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800109a:	2301      	movs	r3, #1
 800109c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800109e:	f7ff fac9 	bl	8000634 <HAL_GetTick>
 80010a2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	019a      	lsls	r2, r3, #6
 80010a8:	f53f aebc 	bmi.w	8000e24 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ac:	f7ff fac2 	bl	8000634 <HAL_GetTick>
 80010b0:	1b40      	subs	r0, r0, r5
 80010b2:	2802      	cmp	r0, #2
 80010b4:	d9f6      	bls.n	80010a4 <HAL_RCC_OscConfig+0x2b4>
 80010b6:	e6e2      	b.n	8000e7e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b8:	f7ff fabc 	bl	8000634 <HAL_GetTick>
 80010bc:	1bc0      	subs	r0, r0, r7
 80010be:	2802      	cmp	r0, #2
 80010c0:	d9d8      	bls.n	8001074 <HAL_RCC_OscConfig+0x284>
 80010c2:	e6dc      	b.n	8000e7e <HAL_RCC_OscConfig+0x8e>
 80010c4:	40023800 	.word	0x40023800
 80010c8:	42470000 	.word	0x42470000
 80010cc:	42470e80 	.word	0x42470e80
 80010d0:	40007000 	.word	0x40007000
 80010d4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80010d8:	f7ff faac 	bl	8000634 <HAL_GetTick>
 80010dc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010de:	682b      	ldr	r3, [r5, #0]
 80010e0:	019b      	lsls	r3, r3, #6
 80010e2:	f57f ae9f 	bpl.w	8000e24 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010e6:	f7ff faa5 	bl	8000634 <HAL_GetTick>
 80010ea:	1b00      	subs	r0, r0, r4
 80010ec:	2802      	cmp	r0, #2
 80010ee:	d9f6      	bls.n	80010de <HAL_RCC_OscConfig+0x2ee>
 80010f0:	e6c5      	b.n	8000e7e <HAL_RCC_OscConfig+0x8e>
 80010f2:	bf00      	nop

080010f4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010f4:	4913      	ldr	r1, [pc, #76]	; (8001144 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80010f6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010f8:	688b      	ldr	r3, [r1, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d003      	beq.n	800110a <HAL_RCC_GetSysClockFreq+0x16>
 8001102:	2b08      	cmp	r3, #8
 8001104:	d003      	beq.n	800110e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001106:	4810      	ldr	r0, [pc, #64]	; (8001148 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001108:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800110a:	4810      	ldr	r0, [pc, #64]	; (800114c <HAL_RCC_GetSysClockFreq+0x58>)
 800110c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800110e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001110:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001112:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001114:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001118:	bf14      	ite	ne
 800111a:	480c      	ldrne	r0, [pc, #48]	; (800114c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800111c:	480a      	ldreq	r0, [pc, #40]	; (8001148 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800111e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001122:	bf18      	it	ne
 8001124:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001126:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800112a:	fba1 0100 	umull	r0, r1, r1, r0
 800112e:	f7ff f8af 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HAL_RCC_GetSysClockFreq+0x50>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800113a:	3301      	adds	r3, #1
 800113c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800113e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001142:	bd08      	pop	{r3, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	00f42400 	.word	0x00f42400
 800114c:	017d7840 	.word	0x017d7840

08001150 <HAL_RCC_ClockConfig>:
{
 8001150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001154:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001156:	4604      	mov	r4, r0
 8001158:	b910      	cbnz	r0, 8001160 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800115a:	2001      	movs	r0, #1
 800115c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001160:	4b44      	ldr	r3, [pc, #272]	; (8001274 <HAL_RCC_ClockConfig+0x124>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	f002 020f 	and.w	r2, r2, #15
 8001168:	428a      	cmp	r2, r1
 800116a:	d328      	bcc.n	80011be <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800116c:	6821      	ldr	r1, [r4, #0]
 800116e:	078f      	lsls	r7, r1, #30
 8001170:	d42d      	bmi.n	80011ce <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001172:	07c8      	lsls	r0, r1, #31
 8001174:	d440      	bmi.n	80011f8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001176:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <HAL_RCC_ClockConfig+0x124>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	f002 020f 	and.w	r2, r2, #15
 800117e:	4295      	cmp	r5, r2
 8001180:	d366      	bcc.n	8001250 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001182:	6822      	ldr	r2, [r4, #0]
 8001184:	0751      	lsls	r1, r2, #29
 8001186:	d46c      	bmi.n	8001262 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001188:	0713      	lsls	r3, r2, #28
 800118a:	d507      	bpl.n	800119c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800118c:	4a3a      	ldr	r2, [pc, #232]	; (8001278 <HAL_RCC_ClockConfig+0x128>)
 800118e:	6921      	ldr	r1, [r4, #16]
 8001190:	6893      	ldr	r3, [r2, #8]
 8001192:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001196:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800119a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800119c:	f7ff ffaa 	bl	80010f4 <HAL_RCC_GetSysClockFreq>
 80011a0:	4b35      	ldr	r3, [pc, #212]	; (8001278 <HAL_RCC_ClockConfig+0x128>)
 80011a2:	4a36      	ldr	r2, [pc, #216]	; (800127c <HAL_RCC_ClockConfig+0x12c>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011aa:	5cd3      	ldrb	r3, [r2, r3]
 80011ac:	40d8      	lsrs	r0, r3
 80011ae:	4b34      	ldr	r3, [pc, #208]	; (8001280 <HAL_RCC_ClockConfig+0x130>)
 80011b0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff f9f4 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 80011b8:	2000      	movs	r0, #0
 80011ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011be:	b2ca      	uxtb	r2, r1
 80011c0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 030f 	and.w	r3, r3, #15
 80011c8:	4299      	cmp	r1, r3
 80011ca:	d1c6      	bne.n	800115a <HAL_RCC_ClockConfig+0xa>
 80011cc:	e7ce      	b.n	800116c <HAL_RCC_ClockConfig+0x1c>
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d4:	bf1e      	ittt	ne
 80011d6:	689a      	ldrne	r2, [r3, #8]
 80011d8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80011dc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011de:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011e0:	bf42      	ittt	mi
 80011e2:	689a      	ldrmi	r2, [r3, #8]
 80011e4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80011e8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	68a0      	ldr	r0, [r4, #8]
 80011ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80011f2:	4302      	orrs	r2, r0
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	e7bc      	b.n	8001172 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f8:	6862      	ldr	r2, [r4, #4]
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <HAL_RCC_ClockConfig+0x128>)
 80011fc:	2a01      	cmp	r2, #1
 80011fe:	d11d      	bne.n	800123c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	d0a8      	beq.n	800115a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001208:	4e1b      	ldr	r6, [pc, #108]	; (8001278 <HAL_RCC_ClockConfig+0x128>)
 800120a:	68b3      	ldr	r3, [r6, #8]
 800120c:	f023 0303 	bic.w	r3, r3, #3
 8001210:	4313      	orrs	r3, r2
 8001212:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001214:	f7ff fa0e 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001218:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800121c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121e:	68b3      	ldr	r3, [r6, #8]
 8001220:	6862      	ldr	r2, [r4, #4]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800122a:	d0a4      	beq.n	8001176 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800122c:	f7ff fa02 	bl	8000634 <HAL_GetTick>
 8001230:	1bc0      	subs	r0, r0, r7
 8001232:	4540      	cmp	r0, r8
 8001234:	d9f3      	bls.n	800121e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001236:	2003      	movs	r0, #3
}
 8001238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123c:	1e91      	subs	r1, r2, #2
 800123e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001240:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001242:	d802      	bhi.n	800124a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001244:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001248:	e7dd      	b.n	8001206 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124a:	f013 0f02 	tst.w	r3, #2
 800124e:	e7da      	b.n	8001206 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001250:	b2ea      	uxtb	r2, r5
 8001252:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	429d      	cmp	r5, r3
 800125c:	f47f af7d 	bne.w	800115a <HAL_RCC_ClockConfig+0xa>
 8001260:	e78f      	b.n	8001182 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001262:	4905      	ldr	r1, [pc, #20]	; (8001278 <HAL_RCC_ClockConfig+0x128>)
 8001264:	68e0      	ldr	r0, [r4, #12]
 8001266:	688b      	ldr	r3, [r1, #8]
 8001268:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800126c:	4303      	orrs	r3, r0
 800126e:	608b      	str	r3, [r1, #8]
 8001270:	e78a      	b.n	8001188 <HAL_RCC_ClockConfig+0x38>
 8001272:	bf00      	nop
 8001274:	40023c00 	.word	0x40023c00
 8001278:	40023800 	.word	0x40023800
 800127c:	08003528 	.word	0x08003528
 8001280:	20000008 	.word	0x20000008

08001284 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800128e:	5cd3      	ldrb	r3, [r2, r3]
 8001290:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001292:	6810      	ldr	r0, [r2, #0]
}
 8001294:	40d8      	lsrs	r0, r3
 8001296:	4770      	bx	lr
 8001298:	40023800 	.word	0x40023800
 800129c:	08003538 	.word	0x08003538
 80012a0:	20000008 	.word	0x20000008

080012a4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	4a03      	ldr	r2, [pc, #12]	; (80012c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80012b2:	6810      	ldr	r0, [r2, #0]
}
 80012b4:	40d8      	lsrs	r0, r3
 80012b6:	4770      	bx	lr
 80012b8:	40023800 	.word	0x40023800
 80012bc:	08003538 	.word	0x08003538
 80012c0:	20000008 	.word	0x20000008

080012c4 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80012c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c6:	4604      	mov	r4, r0
 80012c8:	460e      	mov	r6, r1
 80012ca:	4615      	mov	r5, r2
 80012cc:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80012ce:	6821      	ldr	r1, [r4, #0]
 80012d0:	688a      	ldr	r2, [r1, #8]
 80012d2:	ea36 0302 	bics.w	r3, r6, r2
 80012d6:	d001      	beq.n	80012dc <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80012d8:	2000      	movs	r0, #0
}
 80012da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80012dc:	1c6b      	adds	r3, r5, #1
 80012de:	d0f7      	beq.n	80012d0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80012e0:	f7ff f9a8 	bl	8000634 <HAL_GetTick>
 80012e4:	1bc0      	subs	r0, r0, r7
 80012e6:	4285      	cmp	r5, r0
 80012e8:	d8f1      	bhi.n	80012ce <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80012f2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012f4:	6862      	ldr	r2, [r4, #4]
 80012f6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80012fa:	d10a      	bne.n	8001312 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 80012fc:	68a2      	ldr	r2, [r4, #8]
 80012fe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001302:	d002      	beq.n	800130a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001304:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001308:	d103      	bne.n	8001312 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001310:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001312:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001314:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001318:	d107      	bne.n	800132a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001328:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800132a:	2301      	movs	r3, #1
 800132c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001330:	2300      	movs	r3, #0
 8001332:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001336:	2003      	movs	r0, #3
 8001338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800133c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800133c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800133e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001340:	4a13      	ldr	r2, [pc, #76]	; (8001390 <SPI_EndRxTxTransaction+0x54>)
 8001342:	4e14      	ldr	r6, [pc, #80]	; (8001394 <SPI_EndRxTxTransaction+0x58>)
 8001344:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001346:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001348:	fbb5 f6f6 	udiv	r6, r5, r6
 800134c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001350:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001352:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8001356:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001358:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800135a:	d10d      	bne.n	8001378 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800135c:	460a      	mov	r2, r1
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	f7ff ffb0 	bl	80012c4 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001364:	b910      	cbnz	r0, 800136c <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8001366:	2000      	movs	r0, #0
}
 8001368:	b002      	add	sp, #8
 800136a:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800136c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800136e:	f043 0320 	orr.w	r3, r3, #32
 8001372:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001374:	2003      	movs	r0, #3
 8001376:	e7f7      	b.n	8001368 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8001378:	9b01      	ldr	r3, [sp, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f3      	beq.n	8001366 <SPI_EndRxTxTransaction+0x2a>
      count--;
 800137e:	9b01      	ldr	r3, [sp, #4]
 8001380:	3b01      	subs	r3, #1
 8001382:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	061b      	lsls	r3, r3, #24
 800138a:	d4f5      	bmi.n	8001378 <SPI_EndRxTxTransaction+0x3c>
 800138c:	e7eb      	b.n	8001366 <SPI_EndRxTxTransaction+0x2a>
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008
 8001394:	016e3600 	.word	0x016e3600

08001398 <HAL_SPI_Init>:
{
 8001398:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800139a:	4604      	mov	r4, r0
 800139c:	2800      	cmp	r0, #0
 800139e:	d036      	beq.n	800140e <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80013a4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80013a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013ac:	b91b      	cbnz	r3, 80013b6 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80013ae:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80013b2:	f000 fe37 	bl	8002024 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80013b6:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80013b8:	68a0      	ldr	r0, [r4, #8]
 80013ba:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80013bc:	2302      	movs	r3, #2
 80013be:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80013c2:	680b      	ldr	r3, [r1, #0]
 80013c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013c8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80013ca:	6863      	ldr	r3, [r4, #4]
 80013cc:	4303      	orrs	r3, r0
 80013ce:	68e0      	ldr	r0, [r4, #12]
 80013d0:	4303      	orrs	r3, r0
 80013d2:	6920      	ldr	r0, [r4, #16]
 80013d4:	4303      	orrs	r3, r0
 80013d6:	6960      	ldr	r0, [r4, #20]
 80013d8:	4303      	orrs	r3, r0
 80013da:	69e0      	ldr	r0, [r4, #28]
 80013dc:	4303      	orrs	r3, r0
 80013de:	6a20      	ldr	r0, [r4, #32]
 80013e0:	4303      	orrs	r3, r0
 80013e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80013e4:	4303      	orrs	r3, r0
 80013e6:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80013ea:	4303      	orrs	r3, r0
 80013ec:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80013ee:	0c12      	lsrs	r2, r2, #16
 80013f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013f2:	f002 0204 	and.w	r2, r2, #4
 80013f6:	431a      	orrs	r2, r3
 80013f8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013fa:	69cb      	ldr	r3, [r1, #28]
 80013fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001400:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001402:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001404:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001406:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001408:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 800140c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800140e:	2001      	movs	r0, #1
}
 8001410:	bd10      	pop	{r4, pc}

08001412 <HAL_SPI_TransmitReceive>:
{
 8001412:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001416:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001418:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800141c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800141e:	2b01      	cmp	r3, #1
{
 8001420:	4604      	mov	r4, r0
 8001422:	460d      	mov	r5, r1
 8001424:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8001426:	f000 80e2 	beq.w	80015ee <HAL_SPI_TransmitReceive+0x1dc>
 800142a:	2301      	movs	r3, #1
 800142c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001430:	f7ff f900 	bl	8000634 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001434:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8001438:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800143a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800143c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800143e:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001440:	d00a      	beq.n	8001458 <HAL_SPI_TransmitReceive+0x46>
 8001442:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001446:	f040 80d0 	bne.w	80015ea <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800144a:	68a0      	ldr	r0, [r4, #8]
 800144c:	2800      	cmp	r0, #0
 800144e:	f040 80cc 	bne.w	80015ea <HAL_SPI_TransmitReceive+0x1d8>
 8001452:	2b04      	cmp	r3, #4
 8001454:	f040 80c9 	bne.w	80015ea <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001458:	2d00      	cmp	r5, #0
 800145a:	f000 80c4 	beq.w	80015e6 <HAL_SPI_TransmitReceive+0x1d4>
 800145e:	f1b9 0f00 	cmp.w	r9, #0
 8001462:	f000 80c0 	beq.w	80015e6 <HAL_SPI_TransmitReceive+0x1d4>
 8001466:	2e00      	cmp	r6, #0
 8001468:	f000 80bd 	beq.w	80015e6 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800146c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001470:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001474:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001476:	bf1c      	itt	ne
 8001478:	2305      	movne	r3, #5
 800147a:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800147e:	2300      	movs	r3, #0
 8001480:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001482:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001484:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001486:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001488:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800148a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800148c:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800148e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001490:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001492:	bf58      	it	pl
 8001494:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001496:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001498:	bf58      	it	pl
 800149a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800149e:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80014a0:	bf58      	it	pl
 80014a2:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80014a4:	68e2      	ldr	r2, [r4, #12]
 80014a6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80014aa:	d158      	bne.n	800155e <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80014ac:	b109      	cbz	r1, 80014b2 <HAL_SPI_TransmitReceive+0xa0>
 80014ae:	2e01      	cmp	r6, #1
 80014b0:	d107      	bne.n	80014c2 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80014b2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80014b6:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80014b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80014ba:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29b      	uxth	r3, r3
 80014c0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80014c2:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80014c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	b9ab      	cbnz	r3, 80014f6 <HAL_SPI_TransmitReceive+0xe4>
 80014ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	b993      	cbnz	r3, 80014f6 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80014d0:	4642      	mov	r2, r8
 80014d2:	4639      	mov	r1, r7
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff ff31 	bl	800133c <SPI_EndRxTxTransaction>
 80014da:	2800      	cmp	r0, #0
 80014dc:	f040 8081 	bne.w	80015e2 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80014e0:	68a3      	ldr	r3, [r4, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d132      	bne.n	800154c <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	9001      	str	r0, [sp, #4]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	9201      	str	r2, [sp, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	9b01      	ldr	r3, [sp, #4]
 80014f4:	e02a      	b.n	800154c <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80014f6:	6822      	ldr	r2, [r4, #0]
 80014f8:	6893      	ldr	r3, [r2, #8]
 80014fa:	0799      	lsls	r1, r3, #30
 80014fc:	d50d      	bpl.n	800151a <HAL_SPI_TransmitReceive+0x108>
 80014fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001500:	b29b      	uxth	r3, r3
 8001502:	b153      	cbz	r3, 800151a <HAL_SPI_TransmitReceive+0x108>
 8001504:	b14d      	cbz	r5, 800151a <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001506:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001508:	f833 1b02 	ldrh.w	r1, [r3], #2
 800150c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800150e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001510:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001512:	3b01      	subs	r3, #1
 8001514:	b29b      	uxth	r3, r3
 8001516:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001518:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800151a:	6893      	ldr	r3, [r2, #8]
 800151c:	07db      	lsls	r3, r3, #31
 800151e:	d50c      	bpl.n	800153a <HAL_SPI_TransmitReceive+0x128>
 8001520:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001522:	b29b      	uxth	r3, r3
 8001524:	b14b      	cbz	r3, 800153a <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001526:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001528:	68d2      	ldr	r2, [r2, #12]
 800152a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800152e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001530:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001532:	3b01      	subs	r3, #1
 8001534:	b29b      	uxth	r3, r3
 8001536:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001538:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800153a:	f7ff f87b 	bl	8000634 <HAL_GetTick>
 800153e:	eba0 0008 	sub.w	r0, r0, r8
 8001542:	4287      	cmp	r7, r0
 8001544:	d8be      	bhi.n	80014c4 <HAL_SPI_TransmitReceive+0xb2>
 8001546:	1c7e      	adds	r6, r7, #1
 8001548:	d0bc      	beq.n	80014c4 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 800154a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800154c:	2301      	movs	r3, #1
 800154e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001552:	2300      	movs	r3, #0
 8001554:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001558:	b003      	add	sp, #12
 800155a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800155e:	b109      	cbz	r1, 8001564 <HAL_SPI_TransmitReceive+0x152>
 8001560:	2e01      	cmp	r6, #1
 8001562:	d108      	bne.n	8001576 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001564:	782a      	ldrb	r2, [r5, #0]
 8001566:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001568:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800156a:	3301      	adds	r3, #1
 800156c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800156e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001570:	3b01      	subs	r3, #1
 8001572:	b29b      	uxth	r3, r3
 8001574:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001576:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001578:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800157a:	b29b      	uxth	r3, r3
 800157c:	b91b      	cbnz	r3, 8001586 <HAL_SPI_TransmitReceive+0x174>
 800157e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001580:	b29b      	uxth	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0a4      	beq.n	80014d0 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001586:	6822      	ldr	r2, [r4, #0]
 8001588:	6893      	ldr	r3, [r2, #8]
 800158a:	0798      	lsls	r0, r3, #30
 800158c:	d50e      	bpl.n	80015ac <HAL_SPI_TransmitReceive+0x19a>
 800158e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001590:	b29b      	uxth	r3, r3
 8001592:	b15b      	cbz	r3, 80015ac <HAL_SPI_TransmitReceive+0x19a>
 8001594:	b155      	cbz	r5, 80015ac <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001596:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800159c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800159e:	3301      	adds	r3, #1
 80015a0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80015a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80015a4:	3b01      	subs	r3, #1
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80015aa:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80015ac:	6822      	ldr	r2, [r4, #0]
 80015ae:	6893      	ldr	r3, [r2, #8]
 80015b0:	07d9      	lsls	r1, r3, #31
 80015b2:	d50d      	bpl.n	80015d0 <HAL_SPI_TransmitReceive+0x1be>
 80015b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	b153      	cbz	r3, 80015d0 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80015ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015bc:	68d2      	ldr	r2, [r2, #12]
 80015be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80015c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015c2:	3301      	adds	r3, #1
 80015c4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80015c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015c8:	3b01      	subs	r3, #1
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80015ce:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80015d0:	f7ff f830 	bl	8000634 <HAL_GetTick>
 80015d4:	eba0 0008 	sub.w	r0, r0, r8
 80015d8:	4287      	cmp	r7, r0
 80015da:	d8cd      	bhi.n	8001578 <HAL_SPI_TransmitReceive+0x166>
 80015dc:	1c7b      	adds	r3, r7, #1
 80015de:	d0cb      	beq.n	8001578 <HAL_SPI_TransmitReceive+0x166>
 80015e0:	e7b3      	b.n	800154a <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80015e2:	2320      	movs	r3, #32
 80015e4:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80015e6:	2001      	movs	r0, #1
 80015e8:	e7b0      	b.n	800154c <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80015ea:	2002      	movs	r0, #2
 80015ec:	e7ae      	b.n	800154c <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80015ee:	2002      	movs	r0, #2
 80015f0:	e7b2      	b.n	8001558 <HAL_SPI_TransmitReceive+0x146>
	...

080015f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015f8:	6806      	ldr	r6, [r0, #0]
 80015fa:	68c2      	ldr	r2, [r0, #12]
 80015fc:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015fe:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001600:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001604:	4313      	orrs	r3, r2
 8001606:	6133      	str	r3, [r6, #16]
{
 8001608:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800160a:	6883      	ldr	r3, [r0, #8]
 800160c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800160e:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001610:	4303      	orrs	r3, r0
 8001612:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001614:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001618:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800161a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800161e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001620:	4313      	orrs	r3, r2
 8001622:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001624:	6973      	ldr	r3, [r6, #20]
 8001626:	69a2      	ldr	r2, [r4, #24]
 8001628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800162c:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800162e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001632:	6173      	str	r3, [r6, #20]
 8001634:	4b7a      	ldr	r3, [pc, #488]	; (8001820 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001636:	d17c      	bne.n	8001732 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001638:	429e      	cmp	r6, r3
 800163a:	d003      	beq.n	8001644 <UART_SetConfig+0x50>
 800163c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001640:	429e      	cmp	r6, r3
 8001642:	d144      	bne.n	80016ce <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001644:	f7ff fe2e 	bl	80012a4 <HAL_RCC_GetPCLK2Freq>
 8001648:	2519      	movs	r5, #25
 800164a:	fb05 f300 	mul.w	r3, r5, r0
 800164e:	6860      	ldr	r0, [r4, #4]
 8001650:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001654:	0040      	lsls	r0, r0, #1
 8001656:	fbb3 f3f0 	udiv	r3, r3, r0
 800165a:	fbb3 f3f9 	udiv	r3, r3, r9
 800165e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001662:	f7ff fe1f 	bl	80012a4 <HAL_RCC_GetPCLK2Freq>
 8001666:	6863      	ldr	r3, [r4, #4]
 8001668:	4368      	muls	r0, r5
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001670:	f7ff fe18 	bl	80012a4 <HAL_RCC_GetPCLK2Freq>
 8001674:	6863      	ldr	r3, [r4, #4]
 8001676:	4368      	muls	r0, r5
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fbb0 f3f3 	udiv	r3, r0, r3
 800167e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001682:	fb09 7313 	mls	r3, r9, r3, r7
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	3332      	adds	r3, #50	; 0x32
 800168a:	fbb3 f3f9 	udiv	r3, r3, r9
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001694:	f7ff fe06 	bl	80012a4 <HAL_RCC_GetPCLK2Freq>
 8001698:	6862      	ldr	r2, [r4, #4]
 800169a:	4368      	muls	r0, r5
 800169c:	0052      	lsls	r2, r2, #1
 800169e:	fbb0 faf2 	udiv	sl, r0, r2
 80016a2:	f7ff fdff 	bl	80012a4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016a6:	6863      	ldr	r3, [r4, #4]
 80016a8:	4368      	muls	r0, r5
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80016b4:	fb09 a313 	mls	r3, r9, r3, sl
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	3332      	adds	r3, #50	; 0x32
 80016bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016c6:	443b      	add	r3, r7
 80016c8:	60b3      	str	r3, [r6, #8]
 80016ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016ce:	f7ff fdd9 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 80016d2:	2519      	movs	r5, #25
 80016d4:	fb05 f300 	mul.w	r3, r5, r0
 80016d8:	6860      	ldr	r0, [r4, #4]
 80016da:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016de:	0040      	lsls	r0, r0, #1
 80016e0:	fbb3 f3f0 	udiv	r3, r3, r0
 80016e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80016e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80016ec:	f7ff fdca 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 80016f0:	6863      	ldr	r3, [r4, #4]
 80016f2:	4368      	muls	r0, r5
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	fbb0 f7f3 	udiv	r7, r0, r3
 80016fa:	f7ff fdc3 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 80016fe:	6863      	ldr	r3, [r4, #4]
 8001700:	4368      	muls	r0, r5
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fbb0 f3f3 	udiv	r3, r0, r3
 8001708:	fbb3 f3f9 	udiv	r3, r3, r9
 800170c:	fb09 7313 	mls	r3, r9, r3, r7
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	3332      	adds	r3, #50	; 0x32
 8001714:	fbb3 f3f9 	udiv	r3, r3, r9
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800171e:	f7ff fdb1 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 8001722:	6862      	ldr	r2, [r4, #4]
 8001724:	4368      	muls	r0, r5
 8001726:	0052      	lsls	r2, r2, #1
 8001728:	fbb0 faf2 	udiv	sl, r0, r2
 800172c:	f7ff fdaa 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 8001730:	e7b9      	b.n	80016a6 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001732:	429e      	cmp	r6, r3
 8001734:	d002      	beq.n	800173c <UART_SetConfig+0x148>
 8001736:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <UART_SetConfig+0x230>)
 8001738:	429e      	cmp	r6, r3
 800173a:	d140      	bne.n	80017be <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800173c:	f7ff fdb2 	bl	80012a4 <HAL_RCC_GetPCLK2Freq>
 8001740:	6867      	ldr	r7, [r4, #4]
 8001742:	2519      	movs	r5, #25
 8001744:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001748:	fb05 f300 	mul.w	r3, r5, r0
 800174c:	00bf      	lsls	r7, r7, #2
 800174e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001752:	fbb3 f3f9 	udiv	r3, r3, r9
 8001756:	011f      	lsls	r7, r3, #4
 8001758:	f7ff fda4 	bl	80012a4 <HAL_RCC_GetPCLK2Freq>
 800175c:	6863      	ldr	r3, [r4, #4]
 800175e:	4368      	muls	r0, r5
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	fbb0 f8f3 	udiv	r8, r0, r3
 8001766:	f7ff fd9d 	bl	80012a4 <HAL_RCC_GetPCLK2Freq>
 800176a:	6863      	ldr	r3, [r4, #4]
 800176c:	4368      	muls	r0, r5
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	fbb0 f3f3 	udiv	r3, r0, r3
 8001774:	fbb3 f3f9 	udiv	r3, r3, r9
 8001778:	fb09 8313 	mls	r3, r9, r3, r8
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	3332      	adds	r3, #50	; 0x32
 8001780:	fbb3 f3f9 	udiv	r3, r3, r9
 8001784:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001788:	f7ff fd8c 	bl	80012a4 <HAL_RCC_GetPCLK2Freq>
 800178c:	6862      	ldr	r2, [r4, #4]
 800178e:	4368      	muls	r0, r5
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	fbb0 faf2 	udiv	sl, r0, r2
 8001796:	f7ff fd85 	bl	80012a4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800179a:	6863      	ldr	r3, [r4, #4]
 800179c:	4368      	muls	r0, r5
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80017a8:	fb09 a313 	mls	r3, r9, r3, sl
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	3332      	adds	r3, #50	; 0x32
 80017b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	ea43 0308 	orr.w	r3, r3, r8
 80017bc:	e783      	b.n	80016c6 <UART_SetConfig+0xd2>
 80017be:	f7ff fd61 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 80017c2:	6867      	ldr	r7, [r4, #4]
 80017c4:	2519      	movs	r5, #25
 80017c6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80017ca:	fb05 f300 	mul.w	r3, r5, r0
 80017ce:	00bf      	lsls	r7, r7, #2
 80017d0:	fbb3 f3f7 	udiv	r3, r3, r7
 80017d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80017d8:	011f      	lsls	r7, r3, #4
 80017da:	f7ff fd53 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 80017de:	6863      	ldr	r3, [r4, #4]
 80017e0:	4368      	muls	r0, r5
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	fbb0 f8f3 	udiv	r8, r0, r3
 80017e8:	f7ff fd4c 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 80017ec:	6863      	ldr	r3, [r4, #4]
 80017ee:	4368      	muls	r0, r5
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f6:	fbb3 f3f9 	udiv	r3, r3, r9
 80017fa:	fb09 8313 	mls	r3, r9, r3, r8
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	3332      	adds	r3, #50	; 0x32
 8001802:	fbb3 f3f9 	udiv	r3, r3, r9
 8001806:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800180a:	f7ff fd3b 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 800180e:	6862      	ldr	r2, [r4, #4]
 8001810:	4368      	muls	r0, r5
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	fbb0 faf2 	udiv	sl, r0, r2
 8001818:	f7ff fd34 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 800181c:	e7bd      	b.n	800179a <UART_SetConfig+0x1a6>
 800181e:	bf00      	nop
 8001820:	40011000 	.word	0x40011000
 8001824:	40011400 	.word	0x40011400

08001828 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182a:	4604      	mov	r4, r0
 800182c:	460e      	mov	r6, r1
 800182e:	4617      	mov	r7, r2
 8001830:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001832:	6821      	ldr	r1, [r4, #0]
 8001834:	680b      	ldr	r3, [r1, #0]
 8001836:	ea36 0303 	bics.w	r3, r6, r3
 800183a:	d101      	bne.n	8001840 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800183c:	2000      	movs	r0, #0
}
 800183e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001840:	1c6b      	adds	r3, r5, #1
 8001842:	d0f7      	beq.n	8001834 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001844:	b995      	cbnz	r5, 800186c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800184e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001850:	695a      	ldr	r2, [r3, #20]
 8001852:	f022 0201 	bic.w	r2, r2, #1
 8001856:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001858:	2320      	movs	r3, #32
 800185a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800185e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001862:	2300      	movs	r3, #0
 8001864:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001868:	2003      	movs	r0, #3
 800186a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800186c:	f7fe fee2 	bl	8000634 <HAL_GetTick>
 8001870:	1bc0      	subs	r0, r0, r7
 8001872:	4285      	cmp	r5, r0
 8001874:	d2dd      	bcs.n	8001832 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001876:	e7e6      	b.n	8001846 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001878 <HAL_UART_Init>:
{
 8001878:	b510      	push	{r4, lr}
  if (huart == NULL)
 800187a:	4604      	mov	r4, r0
 800187c:	b340      	cbz	r0, 80018d0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800187e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001882:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001886:	b91b      	cbnz	r3, 8001890 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001888:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800188c:	f000 fca8 	bl	80021e0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001890:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001892:	2324      	movs	r3, #36	; 0x24
 8001894:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001898:	68d3      	ldr	r3, [r2, #12]
 800189a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800189e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80018a0:	4620      	mov	r0, r4
 80018a2:	f7ff fea7 	bl	80015f4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018b6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018be:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018c0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80018c2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018c4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018ca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80018ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018d0:	2001      	movs	r0, #1
}
 80018d2:	bd10      	pop	{r4, pc}

080018d4 <HAL_UART_Transmit>:
{
 80018d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018d8:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80018da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80018de:	2b20      	cmp	r3, #32
{
 80018e0:	4604      	mov	r4, r0
 80018e2:	460d      	mov	r5, r1
 80018e4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80018e6:	d14f      	bne.n	8001988 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 80018e8:	2900      	cmp	r1, #0
 80018ea:	d04a      	beq.n	8001982 <HAL_UART_Transmit+0xae>
 80018ec:	2a00      	cmp	r2, #0
 80018ee:	d048      	beq.n	8001982 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80018f0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d047      	beq.n	8001988 <HAL_UART_Transmit+0xb4>
 80018f8:	2301      	movs	r3, #1
 80018fa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018fe:	2300      	movs	r3, #0
 8001900:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001902:	2321      	movs	r3, #33	; 0x21
 8001904:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001908:	f7fe fe94 	bl	8000634 <HAL_GetTick>
    huart->TxXferSize = Size;
 800190c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001910:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001912:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001916:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001918:	b29b      	uxth	r3, r3
 800191a:	b96b      	cbnz	r3, 8001938 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800191c:	463b      	mov	r3, r7
 800191e:	4632      	mov	r2, r6
 8001920:	2140      	movs	r1, #64	; 0x40
 8001922:	4620      	mov	r0, r4
 8001924:	f7ff ff80 	bl	8001828 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001928:	b9b0      	cbnz	r0, 8001958 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800192a:	2320      	movs	r3, #32
 800192c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001930:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001938:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800193a:	3b01      	subs	r3, #1
 800193c:	b29b      	uxth	r3, r3
 800193e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001940:	68a3      	ldr	r3, [r4, #8]
 8001942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001946:	4632      	mov	r2, r6
 8001948:	463b      	mov	r3, r7
 800194a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800194e:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001950:	d10e      	bne.n	8001970 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001952:	f7ff ff69 	bl	8001828 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001956:	b110      	cbz	r0, 800195e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001958:	2003      	movs	r0, #3
 800195a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800195e:	882b      	ldrh	r3, [r5, #0]
 8001960:	6822      	ldr	r2, [r4, #0]
 8001962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001966:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001968:	6923      	ldr	r3, [r4, #16]
 800196a:	b943      	cbnz	r3, 800197e <HAL_UART_Transmit+0xaa>
          pData += 2U;
 800196c:	3502      	adds	r5, #2
 800196e:	e7d2      	b.n	8001916 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001970:	f7ff ff5a 	bl	8001828 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001974:	2800      	cmp	r0, #0
 8001976:	d1ef      	bne.n	8001958 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	782a      	ldrb	r2, [r5, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	3501      	adds	r5, #1
 8001980:	e7c9      	b.n	8001916 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001982:	2001      	movs	r0, #1
 8001984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001988:	2002      	movs	r0, #2
}
 800198a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001990 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001990:	b507      	push	{r0, r1, r2, lr}
 8001992:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&huart8, (uint8_t *)&ch, 1, 0xFFFF);
 8001994:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8001998:	f841 0d04 	str.w	r0, [r1, #-4]!
  HAL_UART_Transmit(&huart8, (uint8_t *)&ch, 1, 0xFFFF);
 800199c:	2201      	movs	r2, #1
 800199e:	4803      	ldr	r0, [pc, #12]	; (80019ac <__io_putchar+0x1c>)
 80019a0:	f7ff ff98 	bl	80018d4 <HAL_UART_Transmit>

  return ch;
}
 80019a4:	9801      	ldr	r0, [sp, #4]
 80019a6:	b003      	add	sp, #12
 80019a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80019ac:	2000034c 	.word	0x2000034c

080019b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b0:	b510      	push	{r4, lr}
 80019b2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b4:	2230      	movs	r2, #48	; 0x30
 80019b6:	2100      	movs	r1, #0
 80019b8:	a808      	add	r0, sp, #32
 80019ba:	f000 fe29 	bl	8002610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019be:	2100      	movs	r1, #0
 80019c0:	2214      	movs	r2, #20
 80019c2:	a803      	add	r0, sp, #12
 80019c4:	f000 fe24 	bl	8002610 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c8:	2400      	movs	r4, #0
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <SystemClock_Config+0x78>)
 80019cc:	9401      	str	r4, [sp, #4]
 80019ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019d4:	641a      	str	r2, [r3, #64]	; 0x40
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <SystemClock_Config+0x7c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019e2:	9402      	str	r4, [sp, #8]
 80019e4:	6813      	ldr	r3, [r2, #0]
 80019e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	6813      	ldr	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019f2:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019fc:	2302      	movs	r3, #2
 80019fe:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a00:	2301      	movs	r3, #1
 8001a02:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a06:	2310      	movs	r3, #16
 8001a08:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0a:	f7ff f9f1 	bl	8000df0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a10:	4621      	mov	r1, r4
 8001a12:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a14:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a16:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a18:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a1a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a1c:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a1e:	f7ff fb97 	bl	8001150 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001a22:	b014      	add	sp, #80	; 0x50
 8001a24:	bd10      	pop	{r4, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40007000 	.word	0x40007000

08001a30 <main>:
{
 8001a30:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001a34:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8001a36:	f7fe fdd7 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 8001a3a:	f7ff ffb9 	bl	80019b0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	2214      	movs	r2, #20
 8001a40:	2100      	movs	r1, #0
 8001a42:	a80b      	add	r0, sp, #44	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a44:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f000 fde3 	bl	8002610 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4a:	4ba5      	ldr	r3, [pc, #660]	; (8001ce0 <main+0x2b0>)
 8001a4c:	9406      	str	r4, [sp, #24]
 8001a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a50:	48a4      	ldr	r0, [pc, #656]	; (8001ce4 <main+0x2b4>)
  hi2c1.Instance = I2C1;
 8001a52:	4da5      	ldr	r5, [pc, #660]	; (8001ce8 <main+0x2b8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a54:	f042 0210 	orr.w	r2, r2, #16
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
 8001a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a5c:	f002 0210 	and.w	r2, r2, #16
 8001a60:	9206      	str	r2, [sp, #24]
 8001a62:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a64:	9407      	str	r4, [sp, #28]
 8001a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a68:	f042 0204 	orr.w	r2, r2, #4
 8001a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a70:	f002 0204 	and.w	r2, r2, #4
 8001a74:	9207      	str	r2, [sp, #28]
 8001a76:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	9408      	str	r4, [sp, #32]
 8001a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a7c:	f042 0201 	orr.w	r2, r2, #1
 8001a80:	631a      	str	r2, [r3, #48]	; 0x30
 8001a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a84:	f002 0201 	and.w	r2, r2, #1
 8001a88:	9208      	str	r2, [sp, #32]
 8001a8a:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	9409      	str	r4, [sp, #36]	; 0x24
 8001a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a90:	f042 0202 	orr.w	r2, r2, #2
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30
 8001a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a98:	f002 0202 	and.w	r2, r2, #2
 8001a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8001a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa0:	940a      	str	r4, [sp, #40]	; 0x28
 8001aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa4:	f042 0208 	orr.w	r2, r2, #8
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001ab0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab2:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001ab4:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001ab8:	f7ff f8b2 	bl	8000c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001abc:	4622      	mov	r2, r4
 8001abe:	2101      	movs	r1, #1
 8001ac0:	488a      	ldr	r0, [pc, #552]	; (8001cec <main+0x2bc>)
 8001ac2:	f7ff f8ad 	bl	8000c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	f248 0102 	movw	r1, #32770	; 0x8002
 8001acc:	4888      	ldr	r0, [pc, #544]	; (8001cf0 <main+0x2c0>)
 8001ace:	f7ff f8a7 	bl	8000c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ad4:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad6:	a90b      	add	r1, sp, #44	; 0x2c
 8001ad8:	4882      	ldr	r0, [pc, #520]	; (8001ce4 <main+0x2b4>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ada:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae2:	f7fe ffb1 	bl	8000a48 <HAL_GPIO_Init>
  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae6:	a90b      	add	r1, sp, #44	; 0x2c
 8001ae8:	4880      	ldr	r0, [pc, #512]	; (8001cec <main+0x2bc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aea:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aee:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af2:	f7fe ffa9 	bl	8000a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001af6:	f248 0302 	movw	r3, #32770	; 0x8002
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	a90b      	add	r1, sp, #44	; 0x2c
 8001afc:	487c      	ldr	r0, [pc, #496]	; (8001cf0 <main+0x2c0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001afe:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f7fe ff9f 	bl	8000a48 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001b0a:	4b7a      	ldr	r3, [pc, #488]	; (8001cf4 <main+0x2c4>)
  hi2c1.Init.ClockSpeed = 100000;
 8001b0c:	4a7a      	ldr	r2, [pc, #488]	; (8001cf8 <main+0x2c8>)
  hi2c1.Instance = I2C1;
 8001b0e:	602b      	str	r3, [r5, #0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b10:	4628      	mov	r0, r5
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001b16:	606a      	str	r2, [r5, #4]
 8001b18:	9203      	str	r2, [sp, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b1a:	612b      	str	r3, [r5, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b1c:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b1e:	60ec      	str	r4, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b20:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b22:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b24:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b26:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b28:	f7ff f880 	bl	8000c2c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	4628      	mov	r0, r5
 8001b30:	f7ff f920 	bl	8000d74 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b34:	4621      	mov	r1, r4
 8001b36:	4628      	mov	r0, r5
 8001b38:	f7ff f93b 	bl	8000db2 <HAL_I2CEx_ConfigDigitalFilter>
  hspi2.Instance = SPI2;
 8001b3c:	4d6f      	ldr	r5, [pc, #444]	; (8001cfc <main+0x2cc>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b3e:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <main+0x2d0>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b40:	60ac      	str	r4, [r5, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b42:	f44f 7b82 	mov.w	fp, #260	; 0x104
 8001b46:	e885 0808 	stmia.w	r5, {r3, fp}
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b4a:	2302      	movs	r3, #2
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b4c:	f44f 7a00 	mov.w	sl, #512	; 0x200
  hspi2.Init.CRCPolynomial = 10;
 8001b50:	f04f 090a 	mov.w	r9, #10
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b54:	612b      	str	r3, [r5, #16]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b56:	4628      	mov	r0, r5
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b58:	2318      	movs	r3, #24
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b5a:	60ec      	str	r4, [r5, #12]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b5c:	616e      	str	r6, [r5, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b5e:	61eb      	str	r3, [r5, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b60:	622c      	str	r4, [r5, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b62:	626c      	str	r4, [r5, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b64:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b66:	f8c5 a018 	str.w	sl, [r5, #24]
  hspi2.Init.CRCPolynomial = 10;
 8001b6a:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b6e:	f7ff fc13 	bl	8001398 <HAL_SPI_Init>
  huart1.Instance = USART1;
 8001b72:	4864      	ldr	r0, [pc, #400]	; (8001d04 <main+0x2d4>)
  huart1.Init.BaudRate = 115200;
 8001b74:	4b64      	ldr	r3, [pc, #400]	; (8001d08 <main+0x2d8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b76:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8001b78:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b7c:	270c      	movs	r7, #12
  huart1.Init.BaudRate = 115200;
 8001b7e:	e880 0108 	stmia.w	r0, {r3, r8}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b82:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b84:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b88:	61c4      	str	r4, [r0, #28]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b8a:	6147      	str	r7, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b8c:	f7ff fe74 	bl	8001878 <HAL_UART_Init>
  huart2.Instance = USART2;
 8001b90:	485e      	ldr	r0, [pc, #376]	; (8001d0c <main+0x2dc>)
 8001b92:	4b5f      	ldr	r3, [pc, #380]	; (8001d10 <main+0x2e0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b94:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001b96:	e880 0108 	stmia.w	r0, {r3, r8}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b9a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b9c:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9e:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	61c4      	str	r4, [r0, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba2:	6147      	str	r7, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba4:	f7ff fe68 	bl	8001878 <HAL_UART_Init>
  hcan1.Instance = CAN1;
 8001ba8:	485a      	ldr	r0, [pc, #360]	; (8001d14 <main+0x2e4>)
  hcan1.Init.Prescaler = 5;
 8001baa:	4a5b      	ldr	r2, [pc, #364]	; (8001d18 <main+0x2e8>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001bac:	6084      	str	r4, [r0, #8]
  hcan1.Init.Prescaler = 5;
 8001bae:	2305      	movs	r3, #5
 8001bb0:	e880 000c 	stmia.w	r0, {r2, r3}
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001bb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bb8:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001bba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bbe:	60c4      	str	r4, [r0, #12]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001bc0:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bc2:	7604      	strb	r4, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001bc4:	7644      	strb	r4, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bc6:	7684      	strb	r4, [r0, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001bc8:	76c6      	strb	r6, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001bca:	7704      	strb	r4, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001bcc:	7744      	strb	r4, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bce:	f7fe fd4b 	bl	8000668 <HAL_CAN_Init>
  hi2c3.Instance = I2C3;
 8001bd2:	4b52      	ldr	r3, [pc, #328]	; (8001d1c <main+0x2ec>)
  hi2c3.Init.ClockSpeed = 100000;
 8001bd4:	9a03      	ldr	r2, [sp, #12]
  hi2c3.Instance = I2C3;
 8001bd6:	4952      	ldr	r1, [pc, #328]	; (8001d20 <main+0x2f0>)
  hi2c3.Init.ClockSpeed = 100000;
 8001bd8:	605a      	str	r2, [r3, #4]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bda:	4618      	mov	r0, r3
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001be0:	611a      	str	r2, [r3, #16]
  hi2c3.Instance = I2C3;
 8001be2:	6019      	str	r1, [r3, #0]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001be4:	609c      	str	r4, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001be6:	60dc      	str	r4, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be8:	615c      	str	r4, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001bea:	619c      	str	r4, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bec:	61dc      	str	r4, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bee:	621c      	str	r4, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bf0:	9303      	str	r3, [sp, #12]
 8001bf2:	f7ff f81b 	bl	8000c2c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bf6:	9b03      	ldr	r3, [sp, #12]
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f8ba 	bl	8000d74 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c00:	9b03      	ldr	r3, [sp, #12]
 8001c02:	4621      	mov	r1, r4
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f8d4 	bl	8000db2 <HAL_I2CEx_ConfigDigitalFilter>
  hspi1.Instance = SPI1;
 8001c0a:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <main+0x2f4>)
 8001c0c:	4a46      	ldr	r2, [pc, #280]	; (8001d28 <main+0x2f8>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0e:	609c      	str	r4, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c10:	e883 0804 	stmia.w	r3, {r2, fp}
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c14:	2202      	movs	r2, #2
 8001c16:	611a      	str	r2, [r3, #16]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c18:	4618      	mov	r0, r3
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c1a:	2218      	movs	r2, #24
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c1c:	60dc      	str	r4, [r3, #12]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c1e:	615e      	str	r6, [r3, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c22:	621c      	str	r4, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c24:	625c      	str	r4, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c26:	629c      	str	r4, [r3, #40]	; 0x28
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c28:	f8c3 a018 	str.w	sl, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001c2c:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c30:	9303      	str	r3, [sp, #12]
 8001c32:	f7ff fbb1 	bl	8001398 <HAL_SPI_Init>
  hspi3.Instance = SPI3;
 8001c36:	483d      	ldr	r0, [pc, #244]	; (8001d2c <main+0x2fc>)
 8001c38:	4a3d      	ldr	r2, [pc, #244]	; (8001d30 <main+0x300>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c3a:	6084      	str	r4, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c3c:	e880 0804 	stmia.w	r0, {r2, fp}
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c40:	60c4      	str	r4, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c42:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c44:	6144      	str	r4, [r0, #20]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c46:	61c4      	str	r4, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c48:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c4a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4c:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c4e:	f8c0 a018 	str.w	sl, [r0, #24]
  hspi3.Init.CRCPolynomial = 10;
 8001c52:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c56:	f7ff fb9f 	bl	8001398 <HAL_SPI_Init>
  hspi4.Instance = SPI4;
 8001c5a:	4836      	ldr	r0, [pc, #216]	; (8001d34 <main+0x304>)
 8001c5c:	4a36      	ldr	r2, [pc, #216]	; (8001d38 <main+0x308>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5e:	6084      	str	r4, [r0, #8]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001c60:	e880 0804 	stmia.w	r0, {r2, fp}
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c64:	60c4      	str	r4, [r0, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c66:	6104      	str	r4, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c68:	6144      	str	r4, [r0, #20]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c6a:	61c4      	str	r4, [r0, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c6c:	6204      	str	r4, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c6e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c70:	6284      	str	r4, [r0, #40]	; 0x28
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001c72:	f8c0 a018 	str.w	sl, [r0, #24]
  hspi4.Init.CRCPolynomial = 10;
 8001c76:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001c7a:	f7ff fb8d 	bl	8001398 <HAL_SPI_Init>
  huart5.Instance = UART5;
 8001c7e:	482f      	ldr	r0, [pc, #188]	; (8001d3c <main+0x30c>)
 8001c80:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <main+0x310>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	6084      	str	r4, [r0, #8]
  huart5.Init.BaudRate = 115200;
 8001c84:	e880 0104 	stmia.w	r0, {r2, r8}
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c88:	60c4      	str	r4, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c8a:	6104      	str	r4, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8c:	6184      	str	r4, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c8e:	61c4      	str	r4, [r0, #28]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c90:	6147      	str	r7, [r0, #20]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c92:	f7ff fdf1 	bl	8001878 <HAL_UART_Init>
  huart7.Instance = UART7;
 8001c96:	482b      	ldr	r0, [pc, #172]	; (8001d44 <main+0x314>)
 8001c98:	4a2b      	ldr	r2, [pc, #172]	; (8001d48 <main+0x318>)
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9a:	6084      	str	r4, [r0, #8]
  huart7.Init.BaudRate = 115200;
 8001c9c:	e880 0104 	stmia.w	r0, {r2, r8}
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001ca0:	60c4      	str	r4, [r0, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001ca2:	6104      	str	r4, [r0, #16]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca4:	6184      	str	r4, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca6:	61c4      	str	r4, [r0, #28]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	6147      	str	r7, [r0, #20]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001caa:	f7ff fde5 	bl	8001878 <HAL_UART_Init>
  huart8.Instance = UART8;
 8001cae:	4827      	ldr	r0, [pc, #156]	; (8001d4c <main+0x31c>)
 8001cb0:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <main+0x320>)
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb2:	6084      	str	r4, [r0, #8]
  huart8.Init.BaudRate = 115200;
 8001cb4:	e880 0104 	stmia.w	r0, {r2, r8}
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001cb8:	60c4      	str	r4, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001cba:	6104      	str	r4, [r0, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbc:	6184      	str	r4, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cbe:	61c4      	str	r4, [r0, #28]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	6147      	str	r7, [r0, #20]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001cc2:	f7ff fdd9 	bl	8001878 <HAL_UART_Init>
  huart3.Instance = USART3;
 8001cc6:	4823      	ldr	r0, [pc, #140]	; (8001d54 <main+0x324>)
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <main+0x328>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8001ccc:	e880 0104 	stmia.w	r0, {r2, r8}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cd2:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd4:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd6:	61c4      	str	r4, [r0, #28]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	6147      	str	r7, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cda:	f7ff fdcd 	bl	8001878 <HAL_UART_Init>
 8001cde:	e03d      	b.n	8001d5c <main+0x32c>
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	200001c8 	.word	0x200001c8
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40005400 	.word	0x40005400
 8001cf8:	000186a0 	.word	0x000186a0
 8001cfc:	200000f0 	.word	0x200000f0
 8001d00:	40003800 	.word	0x40003800
 8001d04:	200002b4 	.word	0x200002b4
 8001d08:	40011000 	.word	0x40011000
 8001d0c:	20000424 	.word	0x20000424
 8001d10:	40004400 	.word	0x40004400
 8001d14:	20000464 	.word	0x20000464
 8001d18:	40006400 	.word	0x40006400
 8001d1c:	2000009c 	.word	0x2000009c
 8001d20:	40005c00 	.word	0x40005c00
 8001d24:	200003cc 	.word	0x200003cc
 8001d28:	40013000 	.word	0x40013000
 8001d2c:	2000021c 	.word	0x2000021c
 8001d30:	40003c00 	.word	0x40003c00
 8001d34:	200002f4 	.word	0x200002f4
 8001d38:	40013400 	.word	0x40013400
 8001d3c:	20000274 	.word	0x20000274
 8001d40:	40005000 	.word	0x40005000
 8001d44:	20000148 	.word	0x20000148
 8001d48:	40007800 	.word	0x40007800
 8001d4c:	2000034c 	.word	0x2000034c
 8001d50:	40007c00 	.word	0x40007c00
 8001d54:	20000188 	.word	0x20000188
 8001d58:	40004800 	.word	0x40004800
  huart6.Instance = USART6;
 8001d5c:	482d      	ldr	r0, [pc, #180]	; (8001e14 <main+0x3e4>)
 8001d5e:	4a2e      	ldr	r2, [pc, #184]	; (8001e18 <main+0x3e8>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d60:	6084      	str	r4, [r0, #8]
  huart6.Init.BaudRate = 115200;
 8001d62:	e880 0104 	stmia.w	r0, {r2, r8}
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d66:	60c4      	str	r4, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d68:	6104      	str	r4, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	6184      	str	r4, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	61c4      	str	r4, [r0, #28]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d6e:	6147      	str	r7, [r0, #20]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d70:	f7ff fd82 	bl	8001878 <HAL_UART_Init>
 8001d74:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d76:	4e29      	ldr	r6, [pc, #164]	; (8001e1c <main+0x3ec>)
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d78:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001d7c:	4698      	mov	r8, r3
 8001d7e:	f504 3402 	add.w	r4, r4, #133120	; 0x20800
    uint8_t txData[2] = {0x8F, 0x00}; /* who am i */
 8001d82:	238f      	movs	r3, #143	; 0x8f
 8001d84:	2700      	movs	r7, #0
    printf("Hello World\r\n");
 8001d86:	4826      	ldr	r0, [pc, #152]	; (8001e20 <main+0x3f0>)
    uint8_t txData[2] = {0x8F, 0x00}; /* who am i */
 8001d88:	f88d 3014 	strb.w	r3, [sp, #20]
 8001d8c:	f88d 7015 	strb.w	r7, [sp, #21]
    printf("Hello World\r\n");
 8001d90:	f000 fcba 	bl	8002708 <puts>
    HAL_Delay(1000);
 8001d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d98:	f7fe fc52 	bl	8000640 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d9c:	463a      	mov	r2, r7
 8001d9e:	2102      	movs	r1, #2
 8001da0:	4630      	mov	r0, r6
 8001da2:	f7fe ff3d 	bl	8000c20 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txData, (uint8_t*)&rxData, sizeof(rxData), 100);
 8001da6:	2364      	movs	r3, #100	; 0x64
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	aa0b      	add	r2, sp, #44	; 0x2c
 8001dac:	2302      	movs	r3, #2
 8001dae:	a905      	add	r1, sp, #20
 8001db0:	481c      	ldr	r0, [pc, #112]	; (8001e24 <main+0x3f4>)
 8001db2:	f7ff fb2e 	bl	8001412 <HAL_SPI_TransmitReceive>
    while( hspi1.State == HAL_SPI_STATE_BUSY );  // wait xmission complete
 8001db6:	f898 3051 	ldrb.w	r3, [r8, #81]	; 0x51
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d0fb      	beq.n	8001db6 <main+0x386>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	4630      	mov	r0, r6
 8001dc4:	f7fe ff2c 	bl	8000c20 <HAL_GPIO_WritePin>
    printf("LSM6DS33: %02X %02X\r\n", rxData[0], rxData[1]);
 8001dc8:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8001dcc:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8001dd0:	4815      	ldr	r0, [pc, #84]	; (8001e28 <main+0x3f8>)
 8001dd2:	f000 fc25 	bl	8002620 <iprintf>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2101      	movs	r1, #1
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7fe ff20 	bl	8000c20 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&txData, (uint8_t*)&rxData, sizeof(rxData), 100);
 8001de0:	2364      	movs	r3, #100	; 0x64
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	aa0b      	add	r2, sp, #44	; 0x2c
 8001de6:	2302      	movs	r3, #2
 8001de8:	a905      	add	r1, sp, #20
 8001dea:	4810      	ldr	r0, [pc, #64]	; (8001e2c <main+0x3fc>)
 8001dec:	f7ff fb11 	bl	8001412 <HAL_SPI_TransmitReceive>
    while( hspi2.State == HAL_SPI_STATE_BUSY );  // wait xmission complete
 8001df0:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d0fb      	beq.n	8001df0 <main+0x3c0>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7fe ff0f 	bl	8000c20 <HAL_GPIO_WritePin>
    printf("LIS3MDL: %02X %02X\r\n", rxData[0], rxData[1]);
 8001e02:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8001e06:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8001e0a:	4809      	ldr	r0, [pc, #36]	; (8001e30 <main+0x400>)
 8001e0c:	f000 fc08 	bl	8002620 <iprintf>
  {
 8001e10:	e7b7      	b.n	8001d82 <main+0x352>
 8001e12:	bf00      	nop
 8001e14:	2000038c 	.word	0x2000038c
 8001e18:	40011400 	.word	0x40011400
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	080034f0 	.word	0x080034f0
 8001e24:	200003cc 	.word	0x200003cc
 8001e28:	080034fd 	.word	0x080034fd
 8001e2c:	200000f0 	.word	0x200000f0
 8001e30:	08003513 	.word	0x08003513

08001e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_MspInit+0x34>)
 8001e38:	2100      	movs	r1, #0
 8001e3a:	9100      	str	r1, [sp, #0]
 8001e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44
 8001e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e46:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e4a:	9200      	str	r2, [sp, #0]
 8001e4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	9101      	str	r1, [sp, #4]
 8001e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e62:	b002      	add	sp, #8
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e6c:	b510      	push	{r4, lr}
 8001e6e:	4604      	mov	r4, r0
 8001e70:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e72:	2214      	movs	r2, #20
 8001e74:	2100      	movs	r1, #0
 8001e76:	a803      	add	r0, sp, #12
 8001e78:	f000 fbca 	bl	8002610 <memset>
  if(hcan->Instance==CAN1)
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_CAN_MspInit+0xa4>)
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d143      	bne.n	8001f0c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e84:	2400      	movs	r4, #0
 8001e86:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001e8a:	9401      	str	r4, [sp, #4]
 8001e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	4821      	ldr	r0, [pc, #132]	; (8001f14 <HAL_CAN_MspInit+0xa8>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e90:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
 8001e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e98:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001e9c:	9201      	str	r2, [sp, #4]
 8001e9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea0:	9402      	str	r4, [sp, #8]
 8001ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea4:	f042 0201 	orr.w	r2, r2, #1
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	9302      	str	r3, [sp, #8]
 8001eb2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001eb4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001eb8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ec4:	2309      	movs	r3, #9
 8001ec6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec8:	f7fe fdbe 	bl	8000a48 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001ecc:	4622      	mov	r2, r4
 8001ece:	4621      	mov	r1, r4
 8001ed0:	2013      	movs	r0, #19
 8001ed2:	f7fe fd61 	bl	8000998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001ed6:	2013      	movs	r0, #19
 8001ed8:	f7fe fd92 	bl	8000a00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001edc:	4622      	mov	r2, r4
 8001ede:	4621      	mov	r1, r4
 8001ee0:	2014      	movs	r0, #20
 8001ee2:	f7fe fd59 	bl	8000998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ee6:	2014      	movs	r0, #20
 8001ee8:	f7fe fd8a 	bl	8000a00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001eec:	4622      	mov	r2, r4
 8001eee:	4621      	mov	r1, r4
 8001ef0:	2015      	movs	r0, #21
 8001ef2:	f7fe fd51 	bl	8000998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001ef6:	2015      	movs	r0, #21
 8001ef8:	f7fe fd82 	bl	8000a00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001efc:	2016      	movs	r0, #22
 8001efe:	4622      	mov	r2, r4
 8001f00:	4621      	mov	r1, r4
 8001f02:	f7fe fd49 	bl	8000998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001f06:	2016      	movs	r0, #22
 8001f08:	f7fe fd7a 	bl	8000a00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001f0c:	b008      	add	sp, #32
 8001f0e:	bd10      	pop	{r4, pc}
 8001f10:	40006400 	.word	0x40006400
 8001f14:	40020000 	.word	0x40020000

08001f18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	2214      	movs	r2, #20
{
 8001f1e:	b08b      	sub	sp, #44	; 0x2c
 8001f20:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f22:	2100      	movs	r1, #0
 8001f24:	eb0d 0002 	add.w	r0, sp, r2
 8001f28:	f000 fb72 	bl	8002610 <memset>
  if(hi2c->Instance==I2C1)
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	4a37      	ldr	r2, [pc, #220]	; (800200c <HAL_I2C_MspInit+0xf4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d126      	bne.n	8001f82 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f34:	4c36      	ldr	r4, [pc, #216]	; (8002010 <HAL_I2C_MspInit+0xf8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	4837      	ldr	r0, [pc, #220]	; (8002014 <HAL_I2C_MspInit+0xfc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f38:	2500      	movs	r5, #0
 8001f3a:	9500      	str	r5, [sp, #0]
 8001f3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	6323      	str	r3, [r4, #48]	; 0x30
 8001f44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f4e:	23c0      	movs	r3, #192	; 0xc0
 8001f50:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f52:	2312      	movs	r3, #18
 8001f54:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f56:	2301      	movs	r3, #1
 8001f58:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f60:	2304      	movs	r3, #4
 8001f62:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f7fe fd70 	bl	8000a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f68:	9501      	str	r5, [sp, #4]
 8001f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f70:	6423      	str	r3, [r4, #64]	; 0x40
 8001f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f7c:	b00b      	add	sp, #44	; 0x2c
 8001f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hi2c->Instance==I2C3)
 8001f82:	4a25      	ldr	r2, [pc, #148]	; (8002018 <HAL_I2C_MspInit+0x100>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d1f9      	bne.n	8001f7c <HAL_I2C_MspInit+0x64>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f88:	4c21      	ldr	r4, [pc, #132]	; (8002010 <HAL_I2C_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8a:	4824      	ldr	r0, [pc, #144]	; (800201c <HAL_I2C_MspInit+0x104>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8c:	2500      	movs	r5, #0
 8001f8e:	9502      	str	r5, [sp, #8]
 8001f90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6323      	str	r3, [r4, #48]	; 0x30
 8001f98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	9302      	str	r3, [sp, #8]
 8001fa0:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	9503      	str	r5, [sp, #12]
 8001fa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6323      	str	r3, [r4, #48]	; 0x30
 8001fac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	9303      	str	r3, [sp, #12]
 8001fb4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb6:	f04f 0912 	mov.w	r9, #18
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fba:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fbe:	f04f 0801 	mov.w	r8, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fc4:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fc8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fca:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fce:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fd4:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd6:	f7fe fd37 	bl	8000a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fda:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	a905      	add	r1, sp, #20
 8001fe0:	480f      	ldr	r0, [pc, #60]	; (8002020 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fe2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe4:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe8:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fee:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f7fe fd2a 	bl	8000a48 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ff4:	9504      	str	r5, [sp, #16]
 8001ff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ff8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ffc:	6423      	str	r3, [r4, #64]	; 0x40
 8001ffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002004:	9304      	str	r3, [sp, #16]
 8002006:	9b04      	ldr	r3, [sp, #16]
}
 8002008:	e7b8      	b.n	8001f7c <HAL_I2C_MspInit+0x64>
 800200a:	bf00      	nop
 800200c:	40005400 	.word	0x40005400
 8002010:	40023800 	.word	0x40023800
 8002014:	40020400 	.word	0x40020400
 8002018:	40005c00 	.word	0x40005c00
 800201c:	40020800 	.word	0x40020800
 8002020:	40020000 	.word	0x40020000

08002024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002026:	4604      	mov	r4, r0
 8002028:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202a:	2214      	movs	r2, #20
 800202c:	2100      	movs	r1, #0
 800202e:	a80b      	add	r0, sp, #44	; 0x2c
 8002030:	f000 faee 	bl	8002610 <memset>
  if(hspi->Instance==SPI1)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	4a60      	ldr	r2, [pc, #384]	; (80021b8 <HAL_SPI_MspInit+0x194>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d123      	bne.n	8002084 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800203c:	4b5f      	ldr	r3, [pc, #380]	; (80021bc <HAL_SPI_MspInit+0x198>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	4860      	ldr	r0, [pc, #384]	; (80021c0 <HAL_SPI_MspInit+0x19c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002040:	2100      	movs	r1, #0
 8002042:	9101      	str	r1, [sp, #4]
 8002044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800204a:	645a      	str	r2, [r3, #68]	; 0x44
 800204c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800204e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002052:	9201      	str	r2, [sp, #4]
 8002054:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	9102      	str	r1, [sp, #8]
 8002058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	9302      	str	r3, [sp, #8]
 8002068:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800206a:	23e0      	movs	r3, #224	; 0xe0
 800206c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002076:	2305      	movs	r3, #5
 8002078:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800207c:	f7fe fce4 	bl	8000a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002080:	b011      	add	sp, #68	; 0x44
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hspi->Instance==SPI2)
 8002084:	4a4f      	ldr	r2, [pc, #316]	; (80021c4 <HAL_SPI_MspInit+0x1a0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d137      	bne.n	80020fa <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800208a:	4b4c      	ldr	r3, [pc, #304]	; (80021bc <HAL_SPI_MspInit+0x198>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208c:	484e      	ldr	r0, [pc, #312]	; (80021c8 <HAL_SPI_MspInit+0x1a4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800208e:	2200      	movs	r2, #0
 8002090:	9203      	str	r2, [sp, #12]
 8002092:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002094:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002098:	6419      	str	r1, [r3, #64]	; 0x40
 800209a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800209c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80020a0:	9103      	str	r1, [sp, #12]
 80020a2:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a4:	9204      	str	r2, [sp, #16]
 80020a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020a8:	f041 0104 	orr.w	r1, r1, #4
 80020ac:	6319      	str	r1, [r3, #48]	; 0x30
 80020ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020b0:	f001 0104 	and.w	r1, r1, #4
 80020b4:	9104      	str	r1, [sp, #16]
 80020b6:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b8:	9205      	str	r2, [sp, #20]
 80020ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020bc:	f042 0202 	orr.w	r2, r2, #2
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	9305      	str	r3, [sp, #20]
 80020ca:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020ce:	230c      	movs	r3, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d0:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d2:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020d4:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d6:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020d8:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020dc:	960d      	str	r6, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020e0:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e2:	f7fe fcb1 	bl	8000a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ea:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ee:	960d      	str	r6, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f0:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020f2:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f4:	a90b      	add	r1, sp, #44	; 0x2c
 80020f6:	4835      	ldr	r0, [pc, #212]	; (80021cc <HAL_SPI_MspInit+0x1a8>)
 80020f8:	e7c0      	b.n	800207c <HAL_SPI_MspInit+0x58>
  else if(hspi->Instance==SPI3)
 80020fa:	4a35      	ldr	r2, [pc, #212]	; (80021d0 <HAL_SPI_MspInit+0x1ac>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d136      	bne.n	800216e <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_SPI_MspInit+0x198>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002102:	4831      	ldr	r0, [pc, #196]	; (80021c8 <HAL_SPI_MspInit+0x1a4>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002104:	2400      	movs	r4, #0
 8002106:	9406      	str	r4, [sp, #24]
 8002108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800210a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800210e:	641a      	str	r2, [r3, #64]	; 0x40
 8002110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002112:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002116:	9206      	str	r2, [sp, #24]
 8002118:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800211a:	9407      	str	r4, [sp, #28]
 800211c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800211e:	f042 0204 	orr.w	r2, r2, #4
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
 8002124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002126:	f002 0204 	and.w	r2, r2, #4
 800212a:	9207      	str	r2, [sp, #28]
 800212c:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800212e:	9408      	str	r4, [sp, #32]
 8002130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002132:	f042 0208 	orr.w	r2, r2, #8
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	9308      	str	r3, [sp, #32]
 8002140:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002142:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002146:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800214a:	2306      	movs	r3, #6
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214e:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002150:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	950e      	str	r5, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002156:	f7fe fc77 	bl	8000a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800215a:	2340      	movs	r3, #64	; 0x40
 800215c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800215e:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002166:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002168:	a90b      	add	r1, sp, #44	; 0x2c
 800216a:	481a      	ldr	r0, [pc, #104]	; (80021d4 <HAL_SPI_MspInit+0x1b0>)
 800216c:	e786      	b.n	800207c <HAL_SPI_MspInit+0x58>
  else if(hspi->Instance==SPI4)
 800216e:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <HAL_SPI_MspInit+0x1b4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d185      	bne.n	8002080 <HAL_SPI_MspInit+0x5c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_SPI_MspInit+0x198>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002176:	4819      	ldr	r0, [pc, #100]	; (80021dc <HAL_SPI_MspInit+0x1b8>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002178:	2100      	movs	r1, #0
 800217a:	9109      	str	r1, [sp, #36]	; 0x24
 800217c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800217e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002182:	645a      	str	r2, [r3, #68]	; 0x44
 8002184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002186:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800218a:	9209      	str	r2, [sp, #36]	; 0x24
 800218c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800218e:	910a      	str	r1, [sp, #40]	; 0x28
 8002190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002192:	f042 0210 	orr.w	r2, r2, #16
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	930a      	str	r3, [sp, #40]	; 0x28
 80021a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80021a2:	2364      	movs	r3, #100	; 0x64
 80021a4:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80021ae:	2305      	movs	r3, #5
 80021b0:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b2:	a90b      	add	r1, sp, #44	; 0x2c
 80021b4:	e762      	b.n	800207c <HAL_SPI_MspInit+0x58>
 80021b6:	bf00      	nop
 80021b8:	40013000 	.word	0x40013000
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40003800 	.word	0x40003800
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40003c00 	.word	0x40003c00
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40013400 	.word	0x40013400
 80021dc:	40021000 	.word	0x40021000

080021e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e2:	4604      	mov	r4, r0
 80021e4:	b097      	sub	sp, #92	; 0x5c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e6:	2214      	movs	r2, #20
 80021e8:	2100      	movs	r1, #0
 80021ea:	a811      	add	r0, sp, #68	; 0x44
 80021ec:	f000 fa10 	bl	8002610 <memset>
  if(huart->Instance==UART5)
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	4a91      	ldr	r2, [pc, #580]	; (8002438 <HAL_UART_MspInit+0x258>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d137      	bne.n	8002268 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80021f8:	4b90      	ldr	r3, [pc, #576]	; (800243c <HAL_UART_MspInit+0x25c>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fa:	4891      	ldr	r0, [pc, #580]	; (8002440 <HAL_UART_MspInit+0x260>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80021fc:	2200      	movs	r2, #0
 80021fe:	9201      	str	r2, [sp, #4]
 8002200:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002202:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002206:	6419      	str	r1, [r3, #64]	; 0x40
 8002208:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800220a:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 800220e:	9101      	str	r1, [sp, #4]
 8002210:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002212:	9202      	str	r2, [sp, #8]
 8002214:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002216:	f041 0104 	orr.w	r1, r1, #4
 800221a:	6319      	str	r1, [r3, #48]	; 0x30
 800221c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800221e:	f001 0104 	and.w	r1, r1, #4
 8002222:	9102      	str	r1, [sp, #8]
 8002224:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002226:	9203      	str	r2, [sp, #12]
 8002228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222a:	f042 0208 	orr.w	r2, r2, #8
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	9303      	str	r3, [sp, #12]
 8002238:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800223c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002240:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002244:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002246:	a911      	add	r1, sp, #68	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002248:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800224c:	9613      	str	r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002250:	9415      	str	r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002252:	f7fe fbf9 	bl	8000a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002256:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002258:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800225c:	9613      	str	r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002260:	9415      	str	r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002262:	a911      	add	r1, sp, #68	; 0x44
 8002264:	4877      	ldr	r0, [pc, #476]	; (8002444 <HAL_UART_MspInit+0x264>)
 8002266:	e025      	b.n	80022b4 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==UART7)
 8002268:	4a77      	ldr	r2, [pc, #476]	; (8002448 <HAL_UART_MspInit+0x268>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d126      	bne.n	80022bc <HAL_UART_MspInit+0xdc>
    __HAL_RCC_UART7_CLK_ENABLE();
 800226e:	4b73      	ldr	r3, [pc, #460]	; (800243c <HAL_UART_MspInit+0x25c>)
 8002270:	2100      	movs	r1, #0
 8002272:	9104      	str	r1, [sp, #16]
 8002274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002276:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
 800227c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002282:	9204      	str	r2, [sp, #16]
 8002284:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002286:	9105      	str	r1, [sp, #20]
 8002288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228a:	f042 0210 	orr.w	r2, r2, #16
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	9305      	str	r3, [sp, #20]
 8002298:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800229a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800229e:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a4:	2301      	movs	r3, #1
 80022a6:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a8:	2303      	movs	r3, #3
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	9314      	str	r3, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ac:	4867      	ldr	r0, [pc, #412]	; (800244c <HAL_UART_MspInit+0x26c>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80022ae:	2308      	movs	r3, #8
 80022b0:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b2:	a911      	add	r1, sp, #68	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b4:	f7fe fbc8 	bl	8000a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80022b8:	b017      	add	sp, #92	; 0x5c
 80022ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==UART8)
 80022bc:	4a64      	ldr	r2, [pc, #400]	; (8002450 <HAL_UART_MspInit+0x270>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d11c      	bne.n	80022fc <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART8_CLK_ENABLE();
 80022c2:	4b5e      	ldr	r3, [pc, #376]	; (800243c <HAL_UART_MspInit+0x25c>)
 80022c4:	2100      	movs	r1, #0
 80022c6:	9106      	str	r1, [sp, #24]
 80022c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022ce:	641a      	str	r2, [r3, #64]	; 0x40
 80022d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022d6:	9206      	str	r2, [sp, #24]
 80022d8:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022da:	9107      	str	r1, [sp, #28]
 80022dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022de:	f042 0210 	orr.w	r2, r2, #16
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2202      	movs	r2, #2
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ec:	9307      	str	r3, [sp, #28]
 80022ee:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022f2:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f4:	2201      	movs	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022f6:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f8:	9213      	str	r2, [sp, #76]	; 0x4c
 80022fa:	e7d6      	b.n	80022aa <HAL_UART_MspInit+0xca>
  else if(huart->Instance==USART1)
 80022fc:	4a55      	ldr	r2, [pc, #340]	; (8002454 <HAL_UART_MspInit+0x274>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d123      	bne.n	800234a <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002302:	4b4e      	ldr	r3, [pc, #312]	; (800243c <HAL_UART_MspInit+0x25c>)
 8002304:	2100      	movs	r1, #0
 8002306:	9108      	str	r1, [sp, #32]
 8002308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800230a:	f042 0210 	orr.w	r2, r2, #16
 800230e:	645a      	str	r2, [r3, #68]	; 0x44
 8002310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002312:	f002 0210 	and.w	r2, r2, #16
 8002316:	9208      	str	r2, [sp, #32]
 8002318:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	9109      	str	r1, [sp, #36]	; 0x24
 800231c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	9309      	str	r3, [sp, #36]	; 0x24
 800232c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800232e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002332:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002338:	2301      	movs	r3, #1
 800233a:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233c:	2303      	movs	r3, #3
 800233e:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002340:	2307      	movs	r3, #7
 8002342:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002344:	a911      	add	r1, sp, #68	; 0x44
 8002346:	4844      	ldr	r0, [pc, #272]	; (8002458 <HAL_UART_MspInit+0x278>)
 8002348:	e7b4      	b.n	80022b4 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 800234a:	4a44      	ldr	r2, [pc, #272]	; (800245c <HAL_UART_MspInit+0x27c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d117      	bne.n	8002380 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002350:	4b3a      	ldr	r3, [pc, #232]	; (800243c <HAL_UART_MspInit+0x25c>)
 8002352:	2100      	movs	r1, #0
 8002354:	910a      	str	r1, [sp, #40]	; 0x28
 8002356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002358:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
 800235e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002360:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002364:	920a      	str	r2, [sp, #40]	; 0x28
 8002366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	910b      	str	r1, [sp, #44]	; 0x2c
 800236a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800236c:	f042 0201 	orr.w	r2, r2, #1
 8002370:	631a      	str	r2, [r3, #48]	; 0x30
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	930b      	str	r3, [sp, #44]	; 0x2c
 800237a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800237c:	230c      	movs	r3, #12
 800237e:	e7d8      	b.n	8002332 <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 8002380:	4a37      	ldr	r2, [pc, #220]	; (8002460 <HAL_UART_MspInit+0x280>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d131      	bne.n	80023ea <HAL_UART_MspInit+0x20a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_UART_MspInit+0x25c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002388:	4836      	ldr	r0, [pc, #216]	; (8002464 <HAL_UART_MspInit+0x284>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800238a:	2200      	movs	r2, #0
 800238c:	920c      	str	r2, [sp, #48]	; 0x30
 800238e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002390:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8002394:	6419      	str	r1, [r3, #64]	; 0x40
 8002396:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002398:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
 800239c:	910c      	str	r1, [sp, #48]	; 0x30
 800239e:	990c      	ldr	r1, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a0:	920d      	str	r2, [sp, #52]	; 0x34
 80023a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023a4:	f041 0102 	orr.w	r1, r1, #2
 80023a8:	6319      	str	r1, [r3, #48]	; 0x30
 80023aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ac:	f001 0102 	and.w	r1, r1, #2
 80023b0:	910d      	str	r1, [sp, #52]	; 0x34
 80023b2:	990d      	ldr	r1, [sp, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b4:	920e      	str	r2, [sp, #56]	; 0x38
 80023b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b8:	f042 0208 	orr.w	r2, r2, #8
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	930e      	str	r3, [sp, #56]	; 0x38
 80023c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ce:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023d2:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d4:	a911      	add	r1, sp, #68	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023d6:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023da:	9613      	str	r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023dc:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023de:	9415      	str	r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e0:	f7fe fb32 	bl	8000a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e8:	e736      	b.n	8002258 <HAL_UART_MspInit+0x78>
  else if(huart->Instance==USART6)
 80023ea:	4a1f      	ldr	r2, [pc, #124]	; (8002468 <HAL_UART_MspInit+0x288>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	f47f af63 	bne.w	80022b8 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_UART_MspInit+0x25c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f4:	4812      	ldr	r0, [pc, #72]	; (8002440 <HAL_UART_MspInit+0x260>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80023f6:	2100      	movs	r1, #0
 80023f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80023fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023fc:	f042 0220 	orr.w	r2, r2, #32
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
 8002402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002404:	f002 0220 	and.w	r2, r2, #32
 8002408:	920f      	str	r2, [sp, #60]	; 0x3c
 800240a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240c:	9110      	str	r1, [sp, #64]	; 0x40
 800240e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002410:	f042 0204 	orr.w	r2, r2, #4
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	9310      	str	r3, [sp, #64]	; 0x40
 800241e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002420:	23c0      	movs	r3, #192	; 0xc0
 8002422:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002428:	2301      	movs	r3, #1
 800242a:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002430:	2308      	movs	r3, #8
 8002432:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002434:	a911      	add	r1, sp, #68	; 0x44
 8002436:	e73d      	b.n	80022b4 <HAL_UART_MspInit+0xd4>
 8002438:	40005000 	.word	0x40005000
 800243c:	40023800 	.word	0x40023800
 8002440:	40020800 	.word	0x40020800
 8002444:	40020c00 	.word	0x40020c00
 8002448:	40007800 	.word	0x40007800
 800244c:	40021000 	.word	0x40021000
 8002450:	40007c00 	.word	0x40007c00
 8002454:	40011000 	.word	0x40011000
 8002458:	40020000 	.word	0x40020000
 800245c:	40004400 	.word	0x40004400
 8002460:	40004800 	.word	0x40004800
 8002464:	40020400 	.word	0x40020400
 8002468:	40011400 	.word	0x40011400

0800246c <NMI_Handler>:
 800246c:	4770      	bx	lr

0800246e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800246e:	e7fe      	b.n	800246e <HardFault_Handler>

08002470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002470:	e7fe      	b.n	8002470 <MemManage_Handler>

08002472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002472:	e7fe      	b.n	8002472 <BusFault_Handler>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	e7fe      	b.n	8002474 <UsageFault_Handler>

08002476 <SVC_Handler>:
 8002476:	4770      	bx	lr

08002478 <DebugMon_Handler>:
 8002478:	4770      	bx	lr

0800247a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247a:	4770      	bx	lr

0800247c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247c:	f7fe b8ce 	b.w	800061c <HAL_IncTick>

08002480 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002480:	4801      	ldr	r0, [pc, #4]	; (8002488 <CAN1_SCE_IRQHandler+0x8>)
 8002482:	f7fe b979 	b.w	8000778 <HAL_CAN_IRQHandler>
 8002486:	bf00      	nop
 8002488:	20000464 	.word	0x20000464

0800248c <CAN1_RX1_IRQHandler>:
 800248c:	f7ff bff8 	b.w	8002480 <CAN1_SCE_IRQHandler>

08002490 <CAN1_RX0_IRQHandler>:
 8002490:	f7ff bff6 	b.w	8002480 <CAN1_SCE_IRQHandler>

08002494 <CAN1_TX_IRQHandler>:
 8002494:	f7ff bff4 	b.w	8002480 <CAN1_SCE_IRQHandler>

08002498 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	460e      	mov	r6, r1
 800249c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249e:	460c      	mov	r4, r1
 80024a0:	1ba3      	subs	r3, r4, r6
 80024a2:	429d      	cmp	r5, r3
 80024a4:	dc01      	bgt.n	80024aa <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80024a6:	4628      	mov	r0, r5
 80024a8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80024aa:	f3af 8000 	nop.w
 80024ae:	f804 0b01 	strb.w	r0, [r4], #1
 80024b2:	e7f5      	b.n	80024a0 <_read+0x8>

080024b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b4:	b570      	push	{r4, r5, r6, lr}
 80024b6:	460e      	mov	r6, r1
 80024b8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ba:	460c      	mov	r4, r1
 80024bc:	1ba3      	subs	r3, r4, r6
 80024be:	429d      	cmp	r5, r3
 80024c0:	dc01      	bgt.n	80024c6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80024c2:	4628      	mov	r0, r5
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80024c6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80024ca:	f7ff fa61 	bl	8001990 <__io_putchar>
 80024ce:	e7f5      	b.n	80024bc <_write+0x8>

080024d0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80024d0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <_sbrk+0x2c>)
 80024d4:	6819      	ldr	r1, [r3, #0]
{
 80024d6:	4602      	mov	r2, r0
	if (heap_end == 0)
 80024d8:	b909      	cbnz	r1, 80024de <_sbrk+0xe>
		heap_end = &end;
 80024da:	4909      	ldr	r1, [pc, #36]	; (8002500 <_sbrk+0x30>)
 80024dc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80024de:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80024e0:	4669      	mov	r1, sp
 80024e2:	4402      	add	r2, r0
 80024e4:	428a      	cmp	r2, r1
 80024e6:	d906      	bls.n	80024f6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80024e8:	f000 f868 	bl	80025bc <__errno>
 80024ec:	230c      	movs	r3, #12
 80024ee:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80024f6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80024f8:	bd08      	pop	{r3, pc}
 80024fa:	bf00      	nop
 80024fc:	2000008c 	.word	0x2000008c
 8002500:	20000490 	.word	0x20000490

08002504 <_close>:

int _close(int file)
{
	return -1;
}
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	4770      	bx	lr

0800250a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800250a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800250e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002510:	2000      	movs	r0, #0
 8002512:	4770      	bx	lr

08002514 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002514:	2001      	movs	r0, #1
 8002516:	4770      	bx	lr

08002518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002518:	2000      	movs	r0, #0
 800251a:	4770      	bx	lr

0800251c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800251c:	490f      	ldr	r1, [pc, #60]	; (800255c <SystemInit+0x40>)
 800251e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002522:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <SystemInit+0x44>)
 800252c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800252e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002536:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800253e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002542:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002544:	4a07      	ldr	r2, [pc, #28]	; (8002564 <SystemInit+0x48>)
 8002546:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800254e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002550:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002552:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002556:	608b      	str	r3, [r1, #8]
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00
 8002560:	40023800 	.word	0x40023800
 8002564:	24003010 	.word	0x24003010

08002568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800256c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800256e:	e003      	b.n	8002578 <LoopCopyDataInit>

08002570 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002572:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002574:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002576:	3104      	adds	r1, #4

08002578 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002578:	480b      	ldr	r0, [pc, #44]	; (80025a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800257c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800257e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002580:	d3f6      	bcc.n	8002570 <CopyDataInit>
  ldr  r2, =_sbss
 8002582:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002584:	e002      	b.n	800258c <LoopFillZerobss>

08002586 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002586:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002588:	f842 3b04 	str.w	r3, [r2], #4

0800258c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800258e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002590:	d3f9      	bcc.n	8002586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002592:	f7ff ffc3 	bl	800251c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002596:	f000 f817 	bl	80025c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800259a:	f7ff fa49 	bl	8001a30 <main>
  bx  lr    
 800259e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025a0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80025a4:	080035e8 	.word	0x080035e8
  ldr  r0, =_sdata
 80025a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025ac:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80025b0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80025b4:	20000490 	.word	0x20000490

080025b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b8:	e7fe      	b.n	80025b8 <ADC_IRQHandler>
	...

080025bc <__errno>:
 80025bc:	4b01      	ldr	r3, [pc, #4]	; (80025c4 <__errno+0x8>)
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	2000000c 	.word	0x2000000c

080025c8 <__libc_init_array>:
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	4e0d      	ldr	r6, [pc, #52]	; (8002600 <__libc_init_array+0x38>)
 80025cc:	4c0d      	ldr	r4, [pc, #52]	; (8002604 <__libc_init_array+0x3c>)
 80025ce:	1ba4      	subs	r4, r4, r6
 80025d0:	10a4      	asrs	r4, r4, #2
 80025d2:	2500      	movs	r5, #0
 80025d4:	42a5      	cmp	r5, r4
 80025d6:	d109      	bne.n	80025ec <__libc_init_array+0x24>
 80025d8:	4e0b      	ldr	r6, [pc, #44]	; (8002608 <__libc_init_array+0x40>)
 80025da:	4c0c      	ldr	r4, [pc, #48]	; (800260c <__libc_init_array+0x44>)
 80025dc:	f000 ff7c 	bl	80034d8 <_init>
 80025e0:	1ba4      	subs	r4, r4, r6
 80025e2:	10a4      	asrs	r4, r4, #2
 80025e4:	2500      	movs	r5, #0
 80025e6:	42a5      	cmp	r5, r4
 80025e8:	d105      	bne.n	80025f6 <__libc_init_array+0x2e>
 80025ea:	bd70      	pop	{r4, r5, r6, pc}
 80025ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025f0:	4798      	blx	r3
 80025f2:	3501      	adds	r5, #1
 80025f4:	e7ee      	b.n	80025d4 <__libc_init_array+0xc>
 80025f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025fa:	4798      	blx	r3
 80025fc:	3501      	adds	r5, #1
 80025fe:	e7f2      	b.n	80025e6 <__libc_init_array+0x1e>
 8002600:	080035e0 	.word	0x080035e0
 8002604:	080035e0 	.word	0x080035e0
 8002608:	080035e0 	.word	0x080035e0
 800260c:	080035e4 	.word	0x080035e4

08002610 <memset>:
 8002610:	4402      	add	r2, r0
 8002612:	4603      	mov	r3, r0
 8002614:	4293      	cmp	r3, r2
 8002616:	d100      	bne.n	800261a <memset+0xa>
 8002618:	4770      	bx	lr
 800261a:	f803 1b01 	strb.w	r1, [r3], #1
 800261e:	e7f9      	b.n	8002614 <memset+0x4>

08002620 <iprintf>:
 8002620:	b40f      	push	{r0, r1, r2, r3}
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <iprintf+0x2c>)
 8002624:	b513      	push	{r0, r1, r4, lr}
 8002626:	681c      	ldr	r4, [r3, #0]
 8002628:	b124      	cbz	r4, 8002634 <iprintf+0x14>
 800262a:	69a3      	ldr	r3, [r4, #24]
 800262c:	b913      	cbnz	r3, 8002634 <iprintf+0x14>
 800262e:	4620      	mov	r0, r4
 8002630:	f000 fa24 	bl	8002a7c <__sinit>
 8002634:	ab05      	add	r3, sp, #20
 8002636:	9a04      	ldr	r2, [sp, #16]
 8002638:	68a1      	ldr	r1, [r4, #8]
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	4620      	mov	r0, r4
 800263e:	f000 fbe1 	bl	8002e04 <_vfiprintf_r>
 8002642:	b002      	add	sp, #8
 8002644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002648:	b004      	add	sp, #16
 800264a:	4770      	bx	lr
 800264c:	2000000c 	.word	0x2000000c

08002650 <_puts_r>:
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	460e      	mov	r6, r1
 8002654:	4605      	mov	r5, r0
 8002656:	b118      	cbz	r0, 8002660 <_puts_r+0x10>
 8002658:	6983      	ldr	r3, [r0, #24]
 800265a:	b90b      	cbnz	r3, 8002660 <_puts_r+0x10>
 800265c:	f000 fa0e 	bl	8002a7c <__sinit>
 8002660:	69ab      	ldr	r3, [r5, #24]
 8002662:	68ac      	ldr	r4, [r5, #8]
 8002664:	b913      	cbnz	r3, 800266c <_puts_r+0x1c>
 8002666:	4628      	mov	r0, r5
 8002668:	f000 fa08 	bl	8002a7c <__sinit>
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <_puts_r+0xac>)
 800266e:	429c      	cmp	r4, r3
 8002670:	d117      	bne.n	80026a2 <_puts_r+0x52>
 8002672:	686c      	ldr	r4, [r5, #4]
 8002674:	89a3      	ldrh	r3, [r4, #12]
 8002676:	071b      	lsls	r3, r3, #28
 8002678:	d51d      	bpl.n	80026b6 <_puts_r+0x66>
 800267a:	6923      	ldr	r3, [r4, #16]
 800267c:	b1db      	cbz	r3, 80026b6 <_puts_r+0x66>
 800267e:	3e01      	subs	r6, #1
 8002680:	68a3      	ldr	r3, [r4, #8]
 8002682:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002686:	3b01      	subs	r3, #1
 8002688:	60a3      	str	r3, [r4, #8]
 800268a:	b9e9      	cbnz	r1, 80026c8 <_puts_r+0x78>
 800268c:	2b00      	cmp	r3, #0
 800268e:	da2e      	bge.n	80026ee <_puts_r+0x9e>
 8002690:	4622      	mov	r2, r4
 8002692:	210a      	movs	r1, #10
 8002694:	4628      	mov	r0, r5
 8002696:	f000 f83f 	bl	8002718 <__swbuf_r>
 800269a:	3001      	adds	r0, #1
 800269c:	d011      	beq.n	80026c2 <_puts_r+0x72>
 800269e:	200a      	movs	r0, #10
 80026a0:	bd70      	pop	{r4, r5, r6, pc}
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <_puts_r+0xb0>)
 80026a4:	429c      	cmp	r4, r3
 80026a6:	d101      	bne.n	80026ac <_puts_r+0x5c>
 80026a8:	68ac      	ldr	r4, [r5, #8]
 80026aa:	e7e3      	b.n	8002674 <_puts_r+0x24>
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <_puts_r+0xb4>)
 80026ae:	429c      	cmp	r4, r3
 80026b0:	bf08      	it	eq
 80026b2:	68ec      	ldreq	r4, [r5, #12]
 80026b4:	e7de      	b.n	8002674 <_puts_r+0x24>
 80026b6:	4621      	mov	r1, r4
 80026b8:	4628      	mov	r0, r5
 80026ba:	f000 f87f 	bl	80027bc <__swsetup_r>
 80026be:	2800      	cmp	r0, #0
 80026c0:	d0dd      	beq.n	800267e <_puts_r+0x2e>
 80026c2:	f04f 30ff 	mov.w	r0, #4294967295
 80026c6:	bd70      	pop	{r4, r5, r6, pc}
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	da04      	bge.n	80026d6 <_puts_r+0x86>
 80026cc:	69a2      	ldr	r2, [r4, #24]
 80026ce:	4293      	cmp	r3, r2
 80026d0:	db06      	blt.n	80026e0 <_puts_r+0x90>
 80026d2:	290a      	cmp	r1, #10
 80026d4:	d004      	beq.n	80026e0 <_puts_r+0x90>
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	6022      	str	r2, [r4, #0]
 80026dc:	7019      	strb	r1, [r3, #0]
 80026de:	e7cf      	b.n	8002680 <_puts_r+0x30>
 80026e0:	4622      	mov	r2, r4
 80026e2:	4628      	mov	r0, r5
 80026e4:	f000 f818 	bl	8002718 <__swbuf_r>
 80026e8:	3001      	adds	r0, #1
 80026ea:	d1c9      	bne.n	8002680 <_puts_r+0x30>
 80026ec:	e7e9      	b.n	80026c2 <_puts_r+0x72>
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	200a      	movs	r0, #10
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	6022      	str	r2, [r4, #0]
 80026f6:	7018      	strb	r0, [r3, #0]
 80026f8:	bd70      	pop	{r4, r5, r6, pc}
 80026fa:	bf00      	nop
 80026fc:	08003564 	.word	0x08003564
 8002700:	08003584 	.word	0x08003584
 8002704:	08003544 	.word	0x08003544

08002708 <puts>:
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <puts+0xc>)
 800270a:	4601      	mov	r1, r0
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	f7ff bf9f 	b.w	8002650 <_puts_r>
 8002712:	bf00      	nop
 8002714:	2000000c 	.word	0x2000000c

08002718 <__swbuf_r>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	460e      	mov	r6, r1
 800271c:	4614      	mov	r4, r2
 800271e:	4605      	mov	r5, r0
 8002720:	b118      	cbz	r0, 800272a <__swbuf_r+0x12>
 8002722:	6983      	ldr	r3, [r0, #24]
 8002724:	b90b      	cbnz	r3, 800272a <__swbuf_r+0x12>
 8002726:	f000 f9a9 	bl	8002a7c <__sinit>
 800272a:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <__swbuf_r+0x98>)
 800272c:	429c      	cmp	r4, r3
 800272e:	d12a      	bne.n	8002786 <__swbuf_r+0x6e>
 8002730:	686c      	ldr	r4, [r5, #4]
 8002732:	69a3      	ldr	r3, [r4, #24]
 8002734:	60a3      	str	r3, [r4, #8]
 8002736:	89a3      	ldrh	r3, [r4, #12]
 8002738:	071a      	lsls	r2, r3, #28
 800273a:	d52e      	bpl.n	800279a <__swbuf_r+0x82>
 800273c:	6923      	ldr	r3, [r4, #16]
 800273e:	b363      	cbz	r3, 800279a <__swbuf_r+0x82>
 8002740:	6923      	ldr	r3, [r4, #16]
 8002742:	6820      	ldr	r0, [r4, #0]
 8002744:	1ac0      	subs	r0, r0, r3
 8002746:	6963      	ldr	r3, [r4, #20]
 8002748:	b2f6      	uxtb	r6, r6
 800274a:	4298      	cmp	r0, r3
 800274c:	4637      	mov	r7, r6
 800274e:	db04      	blt.n	800275a <__swbuf_r+0x42>
 8002750:	4621      	mov	r1, r4
 8002752:	4628      	mov	r0, r5
 8002754:	f000 f928 	bl	80029a8 <_fflush_r>
 8002758:	bb28      	cbnz	r0, 80027a6 <__swbuf_r+0x8e>
 800275a:	68a3      	ldr	r3, [r4, #8]
 800275c:	3b01      	subs	r3, #1
 800275e:	60a3      	str	r3, [r4, #8]
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	6022      	str	r2, [r4, #0]
 8002766:	701e      	strb	r6, [r3, #0]
 8002768:	6963      	ldr	r3, [r4, #20]
 800276a:	3001      	adds	r0, #1
 800276c:	4298      	cmp	r0, r3
 800276e:	d004      	beq.n	800277a <__swbuf_r+0x62>
 8002770:	89a3      	ldrh	r3, [r4, #12]
 8002772:	07db      	lsls	r3, r3, #31
 8002774:	d519      	bpl.n	80027aa <__swbuf_r+0x92>
 8002776:	2e0a      	cmp	r6, #10
 8002778:	d117      	bne.n	80027aa <__swbuf_r+0x92>
 800277a:	4621      	mov	r1, r4
 800277c:	4628      	mov	r0, r5
 800277e:	f000 f913 	bl	80029a8 <_fflush_r>
 8002782:	b190      	cbz	r0, 80027aa <__swbuf_r+0x92>
 8002784:	e00f      	b.n	80027a6 <__swbuf_r+0x8e>
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <__swbuf_r+0x9c>)
 8002788:	429c      	cmp	r4, r3
 800278a:	d101      	bne.n	8002790 <__swbuf_r+0x78>
 800278c:	68ac      	ldr	r4, [r5, #8]
 800278e:	e7d0      	b.n	8002732 <__swbuf_r+0x1a>
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <__swbuf_r+0xa0>)
 8002792:	429c      	cmp	r4, r3
 8002794:	bf08      	it	eq
 8002796:	68ec      	ldreq	r4, [r5, #12]
 8002798:	e7cb      	b.n	8002732 <__swbuf_r+0x1a>
 800279a:	4621      	mov	r1, r4
 800279c:	4628      	mov	r0, r5
 800279e:	f000 f80d 	bl	80027bc <__swsetup_r>
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d0cc      	beq.n	8002740 <__swbuf_r+0x28>
 80027a6:	f04f 37ff 	mov.w	r7, #4294967295
 80027aa:	4638      	mov	r0, r7
 80027ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027ae:	bf00      	nop
 80027b0:	08003564 	.word	0x08003564
 80027b4:	08003584 	.word	0x08003584
 80027b8:	08003544 	.word	0x08003544

080027bc <__swsetup_r>:
 80027bc:	4b32      	ldr	r3, [pc, #200]	; (8002888 <__swsetup_r+0xcc>)
 80027be:	b570      	push	{r4, r5, r6, lr}
 80027c0:	681d      	ldr	r5, [r3, #0]
 80027c2:	4606      	mov	r6, r0
 80027c4:	460c      	mov	r4, r1
 80027c6:	b125      	cbz	r5, 80027d2 <__swsetup_r+0x16>
 80027c8:	69ab      	ldr	r3, [r5, #24]
 80027ca:	b913      	cbnz	r3, 80027d2 <__swsetup_r+0x16>
 80027cc:	4628      	mov	r0, r5
 80027ce:	f000 f955 	bl	8002a7c <__sinit>
 80027d2:	4b2e      	ldr	r3, [pc, #184]	; (800288c <__swsetup_r+0xd0>)
 80027d4:	429c      	cmp	r4, r3
 80027d6:	d10f      	bne.n	80027f8 <__swsetup_r+0x3c>
 80027d8:	686c      	ldr	r4, [r5, #4]
 80027da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027de:	b29a      	uxth	r2, r3
 80027e0:	0715      	lsls	r5, r2, #28
 80027e2:	d42c      	bmi.n	800283e <__swsetup_r+0x82>
 80027e4:	06d0      	lsls	r0, r2, #27
 80027e6:	d411      	bmi.n	800280c <__swsetup_r+0x50>
 80027e8:	2209      	movs	r2, #9
 80027ea:	6032      	str	r2, [r6, #0]
 80027ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f0:	81a3      	strh	r3, [r4, #12]
 80027f2:	f04f 30ff 	mov.w	r0, #4294967295
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
 80027f8:	4b25      	ldr	r3, [pc, #148]	; (8002890 <__swsetup_r+0xd4>)
 80027fa:	429c      	cmp	r4, r3
 80027fc:	d101      	bne.n	8002802 <__swsetup_r+0x46>
 80027fe:	68ac      	ldr	r4, [r5, #8]
 8002800:	e7eb      	b.n	80027da <__swsetup_r+0x1e>
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <__swsetup_r+0xd8>)
 8002804:	429c      	cmp	r4, r3
 8002806:	bf08      	it	eq
 8002808:	68ec      	ldreq	r4, [r5, #12]
 800280a:	e7e6      	b.n	80027da <__swsetup_r+0x1e>
 800280c:	0751      	lsls	r1, r2, #29
 800280e:	d512      	bpl.n	8002836 <__swsetup_r+0x7a>
 8002810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002812:	b141      	cbz	r1, 8002826 <__swsetup_r+0x6a>
 8002814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002818:	4299      	cmp	r1, r3
 800281a:	d002      	beq.n	8002822 <__swsetup_r+0x66>
 800281c:	4630      	mov	r0, r6
 800281e:	f000 fa1b 	bl	8002c58 <_free_r>
 8002822:	2300      	movs	r3, #0
 8002824:	6363      	str	r3, [r4, #52]	; 0x34
 8002826:	89a3      	ldrh	r3, [r4, #12]
 8002828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800282c:	81a3      	strh	r3, [r4, #12]
 800282e:	2300      	movs	r3, #0
 8002830:	6063      	str	r3, [r4, #4]
 8002832:	6923      	ldr	r3, [r4, #16]
 8002834:	6023      	str	r3, [r4, #0]
 8002836:	89a3      	ldrh	r3, [r4, #12]
 8002838:	f043 0308 	orr.w	r3, r3, #8
 800283c:	81a3      	strh	r3, [r4, #12]
 800283e:	6923      	ldr	r3, [r4, #16]
 8002840:	b94b      	cbnz	r3, 8002856 <__swsetup_r+0x9a>
 8002842:	89a3      	ldrh	r3, [r4, #12]
 8002844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284c:	d003      	beq.n	8002856 <__swsetup_r+0x9a>
 800284e:	4621      	mov	r1, r4
 8002850:	4630      	mov	r0, r6
 8002852:	f000 f9c1 	bl	8002bd8 <__smakebuf_r>
 8002856:	89a2      	ldrh	r2, [r4, #12]
 8002858:	f012 0301 	ands.w	r3, r2, #1
 800285c:	d00c      	beq.n	8002878 <__swsetup_r+0xbc>
 800285e:	2300      	movs	r3, #0
 8002860:	60a3      	str	r3, [r4, #8]
 8002862:	6963      	ldr	r3, [r4, #20]
 8002864:	425b      	negs	r3, r3
 8002866:	61a3      	str	r3, [r4, #24]
 8002868:	6923      	ldr	r3, [r4, #16]
 800286a:	b953      	cbnz	r3, 8002882 <__swsetup_r+0xc6>
 800286c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002870:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002874:	d1ba      	bne.n	80027ec <__swsetup_r+0x30>
 8002876:	bd70      	pop	{r4, r5, r6, pc}
 8002878:	0792      	lsls	r2, r2, #30
 800287a:	bf58      	it	pl
 800287c:	6963      	ldrpl	r3, [r4, #20]
 800287e:	60a3      	str	r3, [r4, #8]
 8002880:	e7f2      	b.n	8002868 <__swsetup_r+0xac>
 8002882:	2000      	movs	r0, #0
 8002884:	e7f7      	b.n	8002876 <__swsetup_r+0xba>
 8002886:	bf00      	nop
 8002888:	2000000c 	.word	0x2000000c
 800288c:	08003564 	.word	0x08003564
 8002890:	08003584 	.word	0x08003584
 8002894:	08003544 	.word	0x08003544

08002898 <__sflush_r>:
 8002898:	898a      	ldrh	r2, [r1, #12]
 800289a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800289e:	4605      	mov	r5, r0
 80028a0:	0710      	lsls	r0, r2, #28
 80028a2:	460c      	mov	r4, r1
 80028a4:	d45a      	bmi.n	800295c <__sflush_r+0xc4>
 80028a6:	684b      	ldr	r3, [r1, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	dc05      	bgt.n	80028b8 <__sflush_r+0x20>
 80028ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	dc02      	bgt.n	80028b8 <__sflush_r+0x20>
 80028b2:	2000      	movs	r0, #0
 80028b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028ba:	2e00      	cmp	r6, #0
 80028bc:	d0f9      	beq.n	80028b2 <__sflush_r+0x1a>
 80028be:	2300      	movs	r3, #0
 80028c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028c4:	682f      	ldr	r7, [r5, #0]
 80028c6:	602b      	str	r3, [r5, #0]
 80028c8:	d033      	beq.n	8002932 <__sflush_r+0x9a>
 80028ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028cc:	89a3      	ldrh	r3, [r4, #12]
 80028ce:	075a      	lsls	r2, r3, #29
 80028d0:	d505      	bpl.n	80028de <__sflush_r+0x46>
 80028d2:	6863      	ldr	r3, [r4, #4]
 80028d4:	1ac0      	subs	r0, r0, r3
 80028d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028d8:	b10b      	cbz	r3, 80028de <__sflush_r+0x46>
 80028da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028dc:	1ac0      	subs	r0, r0, r3
 80028de:	2300      	movs	r3, #0
 80028e0:	4602      	mov	r2, r0
 80028e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028e4:	6a21      	ldr	r1, [r4, #32]
 80028e6:	4628      	mov	r0, r5
 80028e8:	47b0      	blx	r6
 80028ea:	1c43      	adds	r3, r0, #1
 80028ec:	89a3      	ldrh	r3, [r4, #12]
 80028ee:	d106      	bne.n	80028fe <__sflush_r+0x66>
 80028f0:	6829      	ldr	r1, [r5, #0]
 80028f2:	291d      	cmp	r1, #29
 80028f4:	d84b      	bhi.n	800298e <__sflush_r+0xf6>
 80028f6:	4a2b      	ldr	r2, [pc, #172]	; (80029a4 <__sflush_r+0x10c>)
 80028f8:	40ca      	lsrs	r2, r1
 80028fa:	07d6      	lsls	r6, r2, #31
 80028fc:	d547      	bpl.n	800298e <__sflush_r+0xf6>
 80028fe:	2200      	movs	r2, #0
 8002900:	6062      	str	r2, [r4, #4]
 8002902:	04d9      	lsls	r1, r3, #19
 8002904:	6922      	ldr	r2, [r4, #16]
 8002906:	6022      	str	r2, [r4, #0]
 8002908:	d504      	bpl.n	8002914 <__sflush_r+0x7c>
 800290a:	1c42      	adds	r2, r0, #1
 800290c:	d101      	bne.n	8002912 <__sflush_r+0x7a>
 800290e:	682b      	ldr	r3, [r5, #0]
 8002910:	b903      	cbnz	r3, 8002914 <__sflush_r+0x7c>
 8002912:	6560      	str	r0, [r4, #84]	; 0x54
 8002914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002916:	602f      	str	r7, [r5, #0]
 8002918:	2900      	cmp	r1, #0
 800291a:	d0ca      	beq.n	80028b2 <__sflush_r+0x1a>
 800291c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002920:	4299      	cmp	r1, r3
 8002922:	d002      	beq.n	800292a <__sflush_r+0x92>
 8002924:	4628      	mov	r0, r5
 8002926:	f000 f997 	bl	8002c58 <_free_r>
 800292a:	2000      	movs	r0, #0
 800292c:	6360      	str	r0, [r4, #52]	; 0x34
 800292e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002932:	6a21      	ldr	r1, [r4, #32]
 8002934:	2301      	movs	r3, #1
 8002936:	4628      	mov	r0, r5
 8002938:	47b0      	blx	r6
 800293a:	1c41      	adds	r1, r0, #1
 800293c:	d1c6      	bne.n	80028cc <__sflush_r+0x34>
 800293e:	682b      	ldr	r3, [r5, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0c3      	beq.n	80028cc <__sflush_r+0x34>
 8002944:	2b1d      	cmp	r3, #29
 8002946:	d001      	beq.n	800294c <__sflush_r+0xb4>
 8002948:	2b16      	cmp	r3, #22
 800294a:	d101      	bne.n	8002950 <__sflush_r+0xb8>
 800294c:	602f      	str	r7, [r5, #0]
 800294e:	e7b0      	b.n	80028b2 <__sflush_r+0x1a>
 8002950:	89a3      	ldrh	r3, [r4, #12]
 8002952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002956:	81a3      	strh	r3, [r4, #12]
 8002958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800295c:	690f      	ldr	r7, [r1, #16]
 800295e:	2f00      	cmp	r7, #0
 8002960:	d0a7      	beq.n	80028b2 <__sflush_r+0x1a>
 8002962:	0793      	lsls	r3, r2, #30
 8002964:	680e      	ldr	r6, [r1, #0]
 8002966:	bf08      	it	eq
 8002968:	694b      	ldreq	r3, [r1, #20]
 800296a:	600f      	str	r7, [r1, #0]
 800296c:	bf18      	it	ne
 800296e:	2300      	movne	r3, #0
 8002970:	eba6 0807 	sub.w	r8, r6, r7
 8002974:	608b      	str	r3, [r1, #8]
 8002976:	f1b8 0f00 	cmp.w	r8, #0
 800297a:	dd9a      	ble.n	80028b2 <__sflush_r+0x1a>
 800297c:	4643      	mov	r3, r8
 800297e:	463a      	mov	r2, r7
 8002980:	6a21      	ldr	r1, [r4, #32]
 8002982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002984:	4628      	mov	r0, r5
 8002986:	47b0      	blx	r6
 8002988:	2800      	cmp	r0, #0
 800298a:	dc07      	bgt.n	800299c <__sflush_r+0x104>
 800298c:	89a3      	ldrh	r3, [r4, #12]
 800298e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002992:	81a3      	strh	r3, [r4, #12]
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800299c:	4407      	add	r7, r0
 800299e:	eba8 0800 	sub.w	r8, r8, r0
 80029a2:	e7e8      	b.n	8002976 <__sflush_r+0xde>
 80029a4:	20400001 	.word	0x20400001

080029a8 <_fflush_r>:
 80029a8:	b538      	push	{r3, r4, r5, lr}
 80029aa:	690b      	ldr	r3, [r1, #16]
 80029ac:	4605      	mov	r5, r0
 80029ae:	460c      	mov	r4, r1
 80029b0:	b1db      	cbz	r3, 80029ea <_fflush_r+0x42>
 80029b2:	b118      	cbz	r0, 80029bc <_fflush_r+0x14>
 80029b4:	6983      	ldr	r3, [r0, #24]
 80029b6:	b90b      	cbnz	r3, 80029bc <_fflush_r+0x14>
 80029b8:	f000 f860 	bl	8002a7c <__sinit>
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <_fflush_r+0x48>)
 80029be:	429c      	cmp	r4, r3
 80029c0:	d109      	bne.n	80029d6 <_fflush_r+0x2e>
 80029c2:	686c      	ldr	r4, [r5, #4]
 80029c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029c8:	b17b      	cbz	r3, 80029ea <_fflush_r+0x42>
 80029ca:	4621      	mov	r1, r4
 80029cc:	4628      	mov	r0, r5
 80029ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029d2:	f7ff bf61 	b.w	8002898 <__sflush_r>
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <_fflush_r+0x4c>)
 80029d8:	429c      	cmp	r4, r3
 80029da:	d101      	bne.n	80029e0 <_fflush_r+0x38>
 80029dc:	68ac      	ldr	r4, [r5, #8]
 80029de:	e7f1      	b.n	80029c4 <_fflush_r+0x1c>
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <_fflush_r+0x50>)
 80029e2:	429c      	cmp	r4, r3
 80029e4:	bf08      	it	eq
 80029e6:	68ec      	ldreq	r4, [r5, #12]
 80029e8:	e7ec      	b.n	80029c4 <_fflush_r+0x1c>
 80029ea:	2000      	movs	r0, #0
 80029ec:	bd38      	pop	{r3, r4, r5, pc}
 80029ee:	bf00      	nop
 80029f0:	08003564 	.word	0x08003564
 80029f4:	08003584 	.word	0x08003584
 80029f8:	08003544 	.word	0x08003544

080029fc <_cleanup_r>:
 80029fc:	4901      	ldr	r1, [pc, #4]	; (8002a04 <_cleanup_r+0x8>)
 80029fe:	f000 b8a9 	b.w	8002b54 <_fwalk_reent>
 8002a02:	bf00      	nop
 8002a04:	080029a9 	.word	0x080029a9

08002a08 <std.isra.0>:
 8002a08:	2300      	movs	r3, #0
 8002a0a:	b510      	push	{r4, lr}
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	6003      	str	r3, [r0, #0]
 8002a10:	6043      	str	r3, [r0, #4]
 8002a12:	6083      	str	r3, [r0, #8]
 8002a14:	8181      	strh	r1, [r0, #12]
 8002a16:	6643      	str	r3, [r0, #100]	; 0x64
 8002a18:	81c2      	strh	r2, [r0, #14]
 8002a1a:	6103      	str	r3, [r0, #16]
 8002a1c:	6143      	str	r3, [r0, #20]
 8002a1e:	6183      	str	r3, [r0, #24]
 8002a20:	4619      	mov	r1, r3
 8002a22:	2208      	movs	r2, #8
 8002a24:	305c      	adds	r0, #92	; 0x5c
 8002a26:	f7ff fdf3 	bl	8002610 <memset>
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <std.isra.0+0x38>)
 8002a2c:	6263      	str	r3, [r4, #36]	; 0x24
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <std.isra.0+0x3c>)
 8002a30:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a32:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <std.isra.0+0x40>)
 8002a34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <std.isra.0+0x44>)
 8002a38:	6224      	str	r4, [r4, #32]
 8002a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8002a3c:	bd10      	pop	{r4, pc}
 8002a3e:	bf00      	nop
 8002a40:	0800337d 	.word	0x0800337d
 8002a44:	0800339f 	.word	0x0800339f
 8002a48:	080033d7 	.word	0x080033d7
 8002a4c:	080033fb 	.word	0x080033fb

08002a50 <__sfmoreglue>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	1e4a      	subs	r2, r1, #1
 8002a54:	2568      	movs	r5, #104	; 0x68
 8002a56:	4355      	muls	r5, r2
 8002a58:	460e      	mov	r6, r1
 8002a5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a5e:	f000 f949 	bl	8002cf4 <_malloc_r>
 8002a62:	4604      	mov	r4, r0
 8002a64:	b140      	cbz	r0, 8002a78 <__sfmoreglue+0x28>
 8002a66:	2100      	movs	r1, #0
 8002a68:	e880 0042 	stmia.w	r0, {r1, r6}
 8002a6c:	300c      	adds	r0, #12
 8002a6e:	60a0      	str	r0, [r4, #8]
 8002a70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a74:	f7ff fdcc 	bl	8002610 <memset>
 8002a78:	4620      	mov	r0, r4
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}

08002a7c <__sinit>:
 8002a7c:	6983      	ldr	r3, [r0, #24]
 8002a7e:	b510      	push	{r4, lr}
 8002a80:	4604      	mov	r4, r0
 8002a82:	bb33      	cbnz	r3, 8002ad2 <__sinit+0x56>
 8002a84:	6483      	str	r3, [r0, #72]	; 0x48
 8002a86:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002a88:	6503      	str	r3, [r0, #80]	; 0x50
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <__sinit+0x58>)
 8002a8c:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <__sinit+0x5c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6282      	str	r2, [r0, #40]	; 0x28
 8002a92:	4298      	cmp	r0, r3
 8002a94:	bf04      	itt	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	6183      	streq	r3, [r0, #24]
 8002a9a:	f000 f81f 	bl	8002adc <__sfp>
 8002a9e:	6060      	str	r0, [r4, #4]
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f000 f81b 	bl	8002adc <__sfp>
 8002aa6:	60a0      	str	r0, [r4, #8]
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f000 f817 	bl	8002adc <__sfp>
 8002aae:	2200      	movs	r2, #0
 8002ab0:	60e0      	str	r0, [r4, #12]
 8002ab2:	2104      	movs	r1, #4
 8002ab4:	6860      	ldr	r0, [r4, #4]
 8002ab6:	f7ff ffa7 	bl	8002a08 <std.isra.0>
 8002aba:	2201      	movs	r2, #1
 8002abc:	2109      	movs	r1, #9
 8002abe:	68a0      	ldr	r0, [r4, #8]
 8002ac0:	f7ff ffa2 	bl	8002a08 <std.isra.0>
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	2112      	movs	r1, #18
 8002ac8:	68e0      	ldr	r0, [r4, #12]
 8002aca:	f7ff ff9d 	bl	8002a08 <std.isra.0>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61a3      	str	r3, [r4, #24]
 8002ad2:	bd10      	pop	{r4, pc}
 8002ad4:	08003540 	.word	0x08003540
 8002ad8:	080029fd 	.word	0x080029fd

08002adc <__sfp>:
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <__sfp+0x74>)
 8002ae0:	681e      	ldr	r6, [r3, #0]
 8002ae2:	69b3      	ldr	r3, [r6, #24]
 8002ae4:	4607      	mov	r7, r0
 8002ae6:	b913      	cbnz	r3, 8002aee <__sfp+0x12>
 8002ae8:	4630      	mov	r0, r6
 8002aea:	f7ff ffc7 	bl	8002a7c <__sinit>
 8002aee:	3648      	adds	r6, #72	; 0x48
 8002af0:	68b4      	ldr	r4, [r6, #8]
 8002af2:	6873      	ldr	r3, [r6, #4]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	d503      	bpl.n	8002b00 <__sfp+0x24>
 8002af8:	6833      	ldr	r3, [r6, #0]
 8002afa:	b133      	cbz	r3, 8002b0a <__sfp+0x2e>
 8002afc:	6836      	ldr	r6, [r6, #0]
 8002afe:	e7f7      	b.n	8002af0 <__sfp+0x14>
 8002b00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b04:	b16d      	cbz	r5, 8002b22 <__sfp+0x46>
 8002b06:	3468      	adds	r4, #104	; 0x68
 8002b08:	e7f4      	b.n	8002af4 <__sfp+0x18>
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	4638      	mov	r0, r7
 8002b0e:	f7ff ff9f 	bl	8002a50 <__sfmoreglue>
 8002b12:	6030      	str	r0, [r6, #0]
 8002b14:	2800      	cmp	r0, #0
 8002b16:	d1f1      	bne.n	8002afc <__sfp+0x20>
 8002b18:	230c      	movs	r3, #12
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	4620      	mov	r0, r4
 8002b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b26:	81e3      	strh	r3, [r4, #14]
 8002b28:	2301      	movs	r3, #1
 8002b2a:	81a3      	strh	r3, [r4, #12]
 8002b2c:	6665      	str	r5, [r4, #100]	; 0x64
 8002b2e:	6025      	str	r5, [r4, #0]
 8002b30:	60a5      	str	r5, [r4, #8]
 8002b32:	6065      	str	r5, [r4, #4]
 8002b34:	6125      	str	r5, [r4, #16]
 8002b36:	6165      	str	r5, [r4, #20]
 8002b38:	61a5      	str	r5, [r4, #24]
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b42:	f7ff fd65 	bl	8002610 <memset>
 8002b46:	6365      	str	r5, [r4, #52]	; 0x34
 8002b48:	63a5      	str	r5, [r4, #56]	; 0x38
 8002b4a:	64a5      	str	r5, [r4, #72]	; 0x48
 8002b4c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002b4e:	e7e6      	b.n	8002b1e <__sfp+0x42>
 8002b50:	08003540 	.word	0x08003540

08002b54 <_fwalk_reent>:
 8002b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b58:	4680      	mov	r8, r0
 8002b5a:	4689      	mov	r9, r1
 8002b5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b60:	2600      	movs	r6, #0
 8002b62:	b914      	cbnz	r4, 8002b6a <_fwalk_reent+0x16>
 8002b64:	4630      	mov	r0, r6
 8002b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b6a:	68a5      	ldr	r5, [r4, #8]
 8002b6c:	6867      	ldr	r7, [r4, #4]
 8002b6e:	3f01      	subs	r7, #1
 8002b70:	d501      	bpl.n	8002b76 <_fwalk_reent+0x22>
 8002b72:	6824      	ldr	r4, [r4, #0]
 8002b74:	e7f5      	b.n	8002b62 <_fwalk_reent+0xe>
 8002b76:	89ab      	ldrh	r3, [r5, #12]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d907      	bls.n	8002b8c <_fwalk_reent+0x38>
 8002b7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b80:	3301      	adds	r3, #1
 8002b82:	d003      	beq.n	8002b8c <_fwalk_reent+0x38>
 8002b84:	4629      	mov	r1, r5
 8002b86:	4640      	mov	r0, r8
 8002b88:	47c8      	blx	r9
 8002b8a:	4306      	orrs	r6, r0
 8002b8c:	3568      	adds	r5, #104	; 0x68
 8002b8e:	e7ee      	b.n	8002b6e <_fwalk_reent+0x1a>

08002b90 <__swhatbuf_r>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	460e      	mov	r6, r1
 8002b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b98:	2900      	cmp	r1, #0
 8002b9a:	b090      	sub	sp, #64	; 0x40
 8002b9c:	4614      	mov	r4, r2
 8002b9e:	461d      	mov	r5, r3
 8002ba0:	da07      	bge.n	8002bb2 <__swhatbuf_r+0x22>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	602b      	str	r3, [r5, #0]
 8002ba6:	89b3      	ldrh	r3, [r6, #12]
 8002ba8:	061a      	lsls	r2, r3, #24
 8002baa:	d410      	bmi.n	8002bce <__swhatbuf_r+0x3e>
 8002bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb0:	e00e      	b.n	8002bd0 <__swhatbuf_r+0x40>
 8002bb2:	aa01      	add	r2, sp, #4
 8002bb4:	f000 fc48 	bl	8003448 <_fstat_r>
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	dbf2      	blt.n	8002ba2 <__swhatbuf_r+0x12>
 8002bbc:	9a02      	ldr	r2, [sp, #8]
 8002bbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002bc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002bc6:	425a      	negs	r2, r3
 8002bc8:	415a      	adcs	r2, r3
 8002bca:	602a      	str	r2, [r5, #0]
 8002bcc:	e7ee      	b.n	8002bac <__swhatbuf_r+0x1c>
 8002bce:	2340      	movs	r3, #64	; 0x40
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	6023      	str	r3, [r4, #0]
 8002bd4:	b010      	add	sp, #64	; 0x40
 8002bd6:	bd70      	pop	{r4, r5, r6, pc}

08002bd8 <__smakebuf_r>:
 8002bd8:	898b      	ldrh	r3, [r1, #12]
 8002bda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bdc:	079d      	lsls	r5, r3, #30
 8002bde:	4606      	mov	r6, r0
 8002be0:	460c      	mov	r4, r1
 8002be2:	d507      	bpl.n	8002bf4 <__smakebuf_r+0x1c>
 8002be4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002be8:	6023      	str	r3, [r4, #0]
 8002bea:	6123      	str	r3, [r4, #16]
 8002bec:	2301      	movs	r3, #1
 8002bee:	6163      	str	r3, [r4, #20]
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd70      	pop	{r4, r5, r6, pc}
 8002bf4:	ab01      	add	r3, sp, #4
 8002bf6:	466a      	mov	r2, sp
 8002bf8:	f7ff ffca 	bl	8002b90 <__swhatbuf_r>
 8002bfc:	9900      	ldr	r1, [sp, #0]
 8002bfe:	4605      	mov	r5, r0
 8002c00:	4630      	mov	r0, r6
 8002c02:	f000 f877 	bl	8002cf4 <_malloc_r>
 8002c06:	b948      	cbnz	r0, 8002c1c <__smakebuf_r+0x44>
 8002c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c0c:	059a      	lsls	r2, r3, #22
 8002c0e:	d4ef      	bmi.n	8002bf0 <__smakebuf_r+0x18>
 8002c10:	f023 0303 	bic.w	r3, r3, #3
 8002c14:	f043 0302 	orr.w	r3, r3, #2
 8002c18:	81a3      	strh	r3, [r4, #12]
 8002c1a:	e7e3      	b.n	8002be4 <__smakebuf_r+0xc>
 8002c1c:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <__smakebuf_r+0x7c>)
 8002c1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c20:	89a3      	ldrh	r3, [r4, #12]
 8002c22:	6020      	str	r0, [r4, #0]
 8002c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c28:	81a3      	strh	r3, [r4, #12]
 8002c2a:	9b00      	ldr	r3, [sp, #0]
 8002c2c:	6163      	str	r3, [r4, #20]
 8002c2e:	9b01      	ldr	r3, [sp, #4]
 8002c30:	6120      	str	r0, [r4, #16]
 8002c32:	b15b      	cbz	r3, 8002c4c <__smakebuf_r+0x74>
 8002c34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c38:	4630      	mov	r0, r6
 8002c3a:	f000 fc17 	bl	800346c <_isatty_r>
 8002c3e:	b128      	cbz	r0, 8002c4c <__smakebuf_r+0x74>
 8002c40:	89a3      	ldrh	r3, [r4, #12]
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	81a3      	strh	r3, [r4, #12]
 8002c4c:	89a3      	ldrh	r3, [r4, #12]
 8002c4e:	431d      	orrs	r5, r3
 8002c50:	81a5      	strh	r5, [r4, #12]
 8002c52:	e7cd      	b.n	8002bf0 <__smakebuf_r+0x18>
 8002c54:	080029fd 	.word	0x080029fd

08002c58 <_free_r>:
 8002c58:	b538      	push	{r3, r4, r5, lr}
 8002c5a:	4605      	mov	r5, r0
 8002c5c:	2900      	cmp	r1, #0
 8002c5e:	d045      	beq.n	8002cec <_free_r+0x94>
 8002c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c64:	1f0c      	subs	r4, r1, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	bfb8      	it	lt
 8002c6a:	18e4      	addlt	r4, r4, r3
 8002c6c:	f000 fc20 	bl	80034b0 <__malloc_lock>
 8002c70:	4a1f      	ldr	r2, [pc, #124]	; (8002cf0 <_free_r+0x98>)
 8002c72:	6813      	ldr	r3, [r2, #0]
 8002c74:	4610      	mov	r0, r2
 8002c76:	b933      	cbnz	r3, 8002c86 <_free_r+0x2e>
 8002c78:	6063      	str	r3, [r4, #4]
 8002c7a:	6014      	str	r4, [r2, #0]
 8002c7c:	4628      	mov	r0, r5
 8002c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c82:	f000 bc16 	b.w	80034b2 <__malloc_unlock>
 8002c86:	42a3      	cmp	r3, r4
 8002c88:	d90c      	bls.n	8002ca4 <_free_r+0x4c>
 8002c8a:	6821      	ldr	r1, [r4, #0]
 8002c8c:	1862      	adds	r2, r4, r1
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	bf04      	itt	eq
 8002c92:	681a      	ldreq	r2, [r3, #0]
 8002c94:	685b      	ldreq	r3, [r3, #4]
 8002c96:	6063      	str	r3, [r4, #4]
 8002c98:	bf04      	itt	eq
 8002c9a:	1852      	addeq	r2, r2, r1
 8002c9c:	6022      	streq	r2, [r4, #0]
 8002c9e:	6004      	str	r4, [r0, #0]
 8002ca0:	e7ec      	b.n	8002c7c <_free_r+0x24>
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	b10a      	cbz	r2, 8002cac <_free_r+0x54>
 8002ca8:	42a2      	cmp	r2, r4
 8002caa:	d9fa      	bls.n	8002ca2 <_free_r+0x4a>
 8002cac:	6819      	ldr	r1, [r3, #0]
 8002cae:	1858      	adds	r0, r3, r1
 8002cb0:	42a0      	cmp	r0, r4
 8002cb2:	d10b      	bne.n	8002ccc <_free_r+0x74>
 8002cb4:	6820      	ldr	r0, [r4, #0]
 8002cb6:	4401      	add	r1, r0
 8002cb8:	1858      	adds	r0, r3, r1
 8002cba:	4282      	cmp	r2, r0
 8002cbc:	6019      	str	r1, [r3, #0]
 8002cbe:	d1dd      	bne.n	8002c7c <_free_r+0x24>
 8002cc0:	6810      	ldr	r0, [r2, #0]
 8002cc2:	6852      	ldr	r2, [r2, #4]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	4401      	add	r1, r0
 8002cc8:	6019      	str	r1, [r3, #0]
 8002cca:	e7d7      	b.n	8002c7c <_free_r+0x24>
 8002ccc:	d902      	bls.n	8002cd4 <_free_r+0x7c>
 8002cce:	230c      	movs	r3, #12
 8002cd0:	602b      	str	r3, [r5, #0]
 8002cd2:	e7d3      	b.n	8002c7c <_free_r+0x24>
 8002cd4:	6820      	ldr	r0, [r4, #0]
 8002cd6:	1821      	adds	r1, r4, r0
 8002cd8:	428a      	cmp	r2, r1
 8002cda:	bf04      	itt	eq
 8002cdc:	6811      	ldreq	r1, [r2, #0]
 8002cde:	6852      	ldreq	r2, [r2, #4]
 8002ce0:	6062      	str	r2, [r4, #4]
 8002ce2:	bf04      	itt	eq
 8002ce4:	1809      	addeq	r1, r1, r0
 8002ce6:	6021      	streq	r1, [r4, #0]
 8002ce8:	605c      	str	r4, [r3, #4]
 8002cea:	e7c7      	b.n	8002c7c <_free_r+0x24>
 8002cec:	bd38      	pop	{r3, r4, r5, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000090 	.word	0x20000090

08002cf4 <_malloc_r>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	1ccd      	adds	r5, r1, #3
 8002cf8:	f025 0503 	bic.w	r5, r5, #3
 8002cfc:	3508      	adds	r5, #8
 8002cfe:	2d0c      	cmp	r5, #12
 8002d00:	bf38      	it	cc
 8002d02:	250c      	movcc	r5, #12
 8002d04:	2d00      	cmp	r5, #0
 8002d06:	4606      	mov	r6, r0
 8002d08:	db01      	blt.n	8002d0e <_malloc_r+0x1a>
 8002d0a:	42a9      	cmp	r1, r5
 8002d0c:	d903      	bls.n	8002d16 <_malloc_r+0x22>
 8002d0e:	230c      	movs	r3, #12
 8002d10:	6033      	str	r3, [r6, #0]
 8002d12:	2000      	movs	r0, #0
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
 8002d16:	f000 fbcb 	bl	80034b0 <__malloc_lock>
 8002d1a:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <_malloc_r+0xb4>)
 8002d1c:	6814      	ldr	r4, [r2, #0]
 8002d1e:	4621      	mov	r1, r4
 8002d20:	b991      	cbnz	r1, 8002d48 <_malloc_r+0x54>
 8002d22:	4c22      	ldr	r4, [pc, #136]	; (8002dac <_malloc_r+0xb8>)
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	b91b      	cbnz	r3, 8002d30 <_malloc_r+0x3c>
 8002d28:	4630      	mov	r0, r6
 8002d2a:	f000 fb17 	bl	800335c <_sbrk_r>
 8002d2e:	6020      	str	r0, [r4, #0]
 8002d30:	4629      	mov	r1, r5
 8002d32:	4630      	mov	r0, r6
 8002d34:	f000 fb12 	bl	800335c <_sbrk_r>
 8002d38:	1c43      	adds	r3, r0, #1
 8002d3a:	d126      	bne.n	8002d8a <_malloc_r+0x96>
 8002d3c:	230c      	movs	r3, #12
 8002d3e:	6033      	str	r3, [r6, #0]
 8002d40:	4630      	mov	r0, r6
 8002d42:	f000 fbb6 	bl	80034b2 <__malloc_unlock>
 8002d46:	e7e4      	b.n	8002d12 <_malloc_r+0x1e>
 8002d48:	680b      	ldr	r3, [r1, #0]
 8002d4a:	1b5b      	subs	r3, r3, r5
 8002d4c:	d41a      	bmi.n	8002d84 <_malloc_r+0x90>
 8002d4e:	2b0b      	cmp	r3, #11
 8002d50:	d90f      	bls.n	8002d72 <_malloc_r+0x7e>
 8002d52:	600b      	str	r3, [r1, #0]
 8002d54:	50cd      	str	r5, [r1, r3]
 8002d56:	18cc      	adds	r4, r1, r3
 8002d58:	4630      	mov	r0, r6
 8002d5a:	f000 fbaa 	bl	80034b2 <__malloc_unlock>
 8002d5e:	f104 000b 	add.w	r0, r4, #11
 8002d62:	1d23      	adds	r3, r4, #4
 8002d64:	f020 0007 	bic.w	r0, r0, #7
 8002d68:	1ac3      	subs	r3, r0, r3
 8002d6a:	d01b      	beq.n	8002da4 <_malloc_r+0xb0>
 8002d6c:	425a      	negs	r2, r3
 8002d6e:	50e2      	str	r2, [r4, r3]
 8002d70:	bd70      	pop	{r4, r5, r6, pc}
 8002d72:	428c      	cmp	r4, r1
 8002d74:	bf0d      	iteet	eq
 8002d76:	6863      	ldreq	r3, [r4, #4]
 8002d78:	684b      	ldrne	r3, [r1, #4]
 8002d7a:	6063      	strne	r3, [r4, #4]
 8002d7c:	6013      	streq	r3, [r2, #0]
 8002d7e:	bf18      	it	ne
 8002d80:	460c      	movne	r4, r1
 8002d82:	e7e9      	b.n	8002d58 <_malloc_r+0x64>
 8002d84:	460c      	mov	r4, r1
 8002d86:	6849      	ldr	r1, [r1, #4]
 8002d88:	e7ca      	b.n	8002d20 <_malloc_r+0x2c>
 8002d8a:	1cc4      	adds	r4, r0, #3
 8002d8c:	f024 0403 	bic.w	r4, r4, #3
 8002d90:	42a0      	cmp	r0, r4
 8002d92:	d005      	beq.n	8002da0 <_malloc_r+0xac>
 8002d94:	1a21      	subs	r1, r4, r0
 8002d96:	4630      	mov	r0, r6
 8002d98:	f000 fae0 	bl	800335c <_sbrk_r>
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	d0cd      	beq.n	8002d3c <_malloc_r+0x48>
 8002da0:	6025      	str	r5, [r4, #0]
 8002da2:	e7d9      	b.n	8002d58 <_malloc_r+0x64>
 8002da4:	bd70      	pop	{r4, r5, r6, pc}
 8002da6:	bf00      	nop
 8002da8:	20000090 	.word	0x20000090
 8002dac:	20000094 	.word	0x20000094

08002db0 <__sfputc_r>:
 8002db0:	6893      	ldr	r3, [r2, #8]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	b410      	push	{r4}
 8002db8:	6093      	str	r3, [r2, #8]
 8002dba:	da09      	bge.n	8002dd0 <__sfputc_r+0x20>
 8002dbc:	6994      	ldr	r4, [r2, #24]
 8002dbe:	42a3      	cmp	r3, r4
 8002dc0:	db02      	blt.n	8002dc8 <__sfputc_r+0x18>
 8002dc2:	b2cb      	uxtb	r3, r1
 8002dc4:	2b0a      	cmp	r3, #10
 8002dc6:	d103      	bne.n	8002dd0 <__sfputc_r+0x20>
 8002dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dcc:	f7ff bca4 	b.w	8002718 <__swbuf_r>
 8002dd0:	6813      	ldr	r3, [r2, #0]
 8002dd2:	1c58      	adds	r0, r3, #1
 8002dd4:	6010      	str	r0, [r2, #0]
 8002dd6:	7019      	strb	r1, [r3, #0]
 8002dd8:	b2c8      	uxtb	r0, r1
 8002dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <__sfputs_r>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	4606      	mov	r6, r0
 8002de4:	460f      	mov	r7, r1
 8002de6:	4614      	mov	r4, r2
 8002de8:	18d5      	adds	r5, r2, r3
 8002dea:	42ac      	cmp	r4, r5
 8002dec:	d101      	bne.n	8002df2 <__sfputs_r+0x12>
 8002dee:	2000      	movs	r0, #0
 8002df0:	e007      	b.n	8002e02 <__sfputs_r+0x22>
 8002df2:	463a      	mov	r2, r7
 8002df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002df8:	4630      	mov	r0, r6
 8002dfa:	f7ff ffd9 	bl	8002db0 <__sfputc_r>
 8002dfe:	1c43      	adds	r3, r0, #1
 8002e00:	d1f3      	bne.n	8002dea <__sfputs_r+0xa>
 8002e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e04 <_vfiprintf_r>:
 8002e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e08:	b09d      	sub	sp, #116	; 0x74
 8002e0a:	460c      	mov	r4, r1
 8002e0c:	4617      	mov	r7, r2
 8002e0e:	9303      	str	r3, [sp, #12]
 8002e10:	4606      	mov	r6, r0
 8002e12:	b118      	cbz	r0, 8002e1c <_vfiprintf_r+0x18>
 8002e14:	6983      	ldr	r3, [r0, #24]
 8002e16:	b90b      	cbnz	r3, 8002e1c <_vfiprintf_r+0x18>
 8002e18:	f7ff fe30 	bl	8002a7c <__sinit>
 8002e1c:	4b7c      	ldr	r3, [pc, #496]	; (8003010 <_vfiprintf_r+0x20c>)
 8002e1e:	429c      	cmp	r4, r3
 8002e20:	d157      	bne.n	8002ed2 <_vfiprintf_r+0xce>
 8002e22:	6874      	ldr	r4, [r6, #4]
 8002e24:	89a3      	ldrh	r3, [r4, #12]
 8002e26:	0718      	lsls	r0, r3, #28
 8002e28:	d55d      	bpl.n	8002ee6 <_vfiprintf_r+0xe2>
 8002e2a:	6923      	ldr	r3, [r4, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d05a      	beq.n	8002ee6 <_vfiprintf_r+0xe2>
 8002e30:	2300      	movs	r3, #0
 8002e32:	9309      	str	r3, [sp, #36]	; 0x24
 8002e34:	2320      	movs	r3, #32
 8002e36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e3a:	2330      	movs	r3, #48	; 0x30
 8002e3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e40:	f04f 0b01 	mov.w	fp, #1
 8002e44:	46b8      	mov	r8, r7
 8002e46:	4645      	mov	r5, r8
 8002e48:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d155      	bne.n	8002efc <_vfiprintf_r+0xf8>
 8002e50:	ebb8 0a07 	subs.w	sl, r8, r7
 8002e54:	d00b      	beq.n	8002e6e <_vfiprintf_r+0x6a>
 8002e56:	4653      	mov	r3, sl
 8002e58:	463a      	mov	r2, r7
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	4630      	mov	r0, r6
 8002e5e:	f7ff ffbf 	bl	8002de0 <__sfputs_r>
 8002e62:	3001      	adds	r0, #1
 8002e64:	f000 80c4 	beq.w	8002ff0 <_vfiprintf_r+0x1ec>
 8002e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e6a:	4453      	add	r3, sl
 8002e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e6e:	f898 3000 	ldrb.w	r3, [r8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80bc 	beq.w	8002ff0 <_vfiprintf_r+0x1ec>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7e:	9304      	str	r3, [sp, #16]
 8002e80:	9307      	str	r3, [sp, #28]
 8002e82:	9205      	str	r2, [sp, #20]
 8002e84:	9306      	str	r3, [sp, #24]
 8002e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8002e8c:	2205      	movs	r2, #5
 8002e8e:	7829      	ldrb	r1, [r5, #0]
 8002e90:	4860      	ldr	r0, [pc, #384]	; (8003014 <_vfiprintf_r+0x210>)
 8002e92:	f7fd f9ad 	bl	80001f0 <memchr>
 8002e96:	f105 0801 	add.w	r8, r5, #1
 8002e9a:	9b04      	ldr	r3, [sp, #16]
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d131      	bne.n	8002f04 <_vfiprintf_r+0x100>
 8002ea0:	06d9      	lsls	r1, r3, #27
 8002ea2:	bf44      	itt	mi
 8002ea4:	2220      	movmi	r2, #32
 8002ea6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002eaa:	071a      	lsls	r2, r3, #28
 8002eac:	bf44      	itt	mi
 8002eae:	222b      	movmi	r2, #43	; 0x2b
 8002eb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002eb4:	782a      	ldrb	r2, [r5, #0]
 8002eb6:	2a2a      	cmp	r2, #42	; 0x2a
 8002eb8:	d02c      	beq.n	8002f14 <_vfiprintf_r+0x110>
 8002eba:	9a07      	ldr	r2, [sp, #28]
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	200a      	movs	r0, #10
 8002ec0:	46a8      	mov	r8, r5
 8002ec2:	3501      	adds	r5, #1
 8002ec4:	f898 3000 	ldrb.w	r3, [r8]
 8002ec8:	3b30      	subs	r3, #48	; 0x30
 8002eca:	2b09      	cmp	r3, #9
 8002ecc:	d96d      	bls.n	8002faa <_vfiprintf_r+0x1a6>
 8002ece:	b371      	cbz	r1, 8002f2e <_vfiprintf_r+0x12a>
 8002ed0:	e026      	b.n	8002f20 <_vfiprintf_r+0x11c>
 8002ed2:	4b51      	ldr	r3, [pc, #324]	; (8003018 <_vfiprintf_r+0x214>)
 8002ed4:	429c      	cmp	r4, r3
 8002ed6:	d101      	bne.n	8002edc <_vfiprintf_r+0xd8>
 8002ed8:	68b4      	ldr	r4, [r6, #8]
 8002eda:	e7a3      	b.n	8002e24 <_vfiprintf_r+0x20>
 8002edc:	4b4f      	ldr	r3, [pc, #316]	; (800301c <_vfiprintf_r+0x218>)
 8002ede:	429c      	cmp	r4, r3
 8002ee0:	bf08      	it	eq
 8002ee2:	68f4      	ldreq	r4, [r6, #12]
 8002ee4:	e79e      	b.n	8002e24 <_vfiprintf_r+0x20>
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f7ff fc67 	bl	80027bc <__swsetup_r>
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d09e      	beq.n	8002e30 <_vfiprintf_r+0x2c>
 8002ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef6:	b01d      	add	sp, #116	; 0x74
 8002ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002efc:	2b25      	cmp	r3, #37	; 0x25
 8002efe:	d0a7      	beq.n	8002e50 <_vfiprintf_r+0x4c>
 8002f00:	46a8      	mov	r8, r5
 8002f02:	e7a0      	b.n	8002e46 <_vfiprintf_r+0x42>
 8002f04:	4a43      	ldr	r2, [pc, #268]	; (8003014 <_vfiprintf_r+0x210>)
 8002f06:	1a80      	subs	r0, r0, r2
 8002f08:	fa0b f000 	lsl.w	r0, fp, r0
 8002f0c:	4318      	orrs	r0, r3
 8002f0e:	9004      	str	r0, [sp, #16]
 8002f10:	4645      	mov	r5, r8
 8002f12:	e7bb      	b.n	8002e8c <_vfiprintf_r+0x88>
 8002f14:	9a03      	ldr	r2, [sp, #12]
 8002f16:	1d11      	adds	r1, r2, #4
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	9103      	str	r1, [sp, #12]
 8002f1c:	2a00      	cmp	r2, #0
 8002f1e:	db01      	blt.n	8002f24 <_vfiprintf_r+0x120>
 8002f20:	9207      	str	r2, [sp, #28]
 8002f22:	e004      	b.n	8002f2e <_vfiprintf_r+0x12a>
 8002f24:	4252      	negs	r2, r2
 8002f26:	f043 0302 	orr.w	r3, r3, #2
 8002f2a:	9207      	str	r2, [sp, #28]
 8002f2c:	9304      	str	r3, [sp, #16]
 8002f2e:	f898 3000 	ldrb.w	r3, [r8]
 8002f32:	2b2e      	cmp	r3, #46	; 0x2e
 8002f34:	d110      	bne.n	8002f58 <_vfiprintf_r+0x154>
 8002f36:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f3c:	f108 0101 	add.w	r1, r8, #1
 8002f40:	d137      	bne.n	8002fb2 <_vfiprintf_r+0x1ae>
 8002f42:	9b03      	ldr	r3, [sp, #12]
 8002f44:	1d1a      	adds	r2, r3, #4
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	9203      	str	r2, [sp, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	bfb8      	it	lt
 8002f4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f52:	f108 0802 	add.w	r8, r8, #2
 8002f56:	9305      	str	r3, [sp, #20]
 8002f58:	4d31      	ldr	r5, [pc, #196]	; (8003020 <_vfiprintf_r+0x21c>)
 8002f5a:	f898 1000 	ldrb.w	r1, [r8]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	4628      	mov	r0, r5
 8002f62:	f7fd f945 	bl	80001f0 <memchr>
 8002f66:	b140      	cbz	r0, 8002f7a <_vfiprintf_r+0x176>
 8002f68:	2340      	movs	r3, #64	; 0x40
 8002f6a:	1b40      	subs	r0, r0, r5
 8002f6c:	fa03 f000 	lsl.w	r0, r3, r0
 8002f70:	9b04      	ldr	r3, [sp, #16]
 8002f72:	4303      	orrs	r3, r0
 8002f74:	9304      	str	r3, [sp, #16]
 8002f76:	f108 0801 	add.w	r8, r8, #1
 8002f7a:	f898 1000 	ldrb.w	r1, [r8]
 8002f7e:	4829      	ldr	r0, [pc, #164]	; (8003024 <_vfiprintf_r+0x220>)
 8002f80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f84:	2206      	movs	r2, #6
 8002f86:	f108 0701 	add.w	r7, r8, #1
 8002f8a:	f7fd f931 	bl	80001f0 <memchr>
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d034      	beq.n	8002ffc <_vfiprintf_r+0x1f8>
 8002f92:	4b25      	ldr	r3, [pc, #148]	; (8003028 <_vfiprintf_r+0x224>)
 8002f94:	bb03      	cbnz	r3, 8002fd8 <_vfiprintf_r+0x1d4>
 8002f96:	9b03      	ldr	r3, [sp, #12]
 8002f98:	3307      	adds	r3, #7
 8002f9a:	f023 0307 	bic.w	r3, r3, #7
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	9303      	str	r3, [sp, #12]
 8002fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fa4:	444b      	add	r3, r9
 8002fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8002fa8:	e74c      	b.n	8002e44 <_vfiprintf_r+0x40>
 8002faa:	fb00 3202 	mla	r2, r0, r2, r3
 8002fae:	2101      	movs	r1, #1
 8002fb0:	e786      	b.n	8002ec0 <_vfiprintf_r+0xbc>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9305      	str	r3, [sp, #20]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	250a      	movs	r5, #10
 8002fba:	4688      	mov	r8, r1
 8002fbc:	3101      	adds	r1, #1
 8002fbe:	f898 2000 	ldrb.w	r2, [r8]
 8002fc2:	3a30      	subs	r2, #48	; 0x30
 8002fc4:	2a09      	cmp	r2, #9
 8002fc6:	d903      	bls.n	8002fd0 <_vfiprintf_r+0x1cc>
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0c5      	beq.n	8002f58 <_vfiprintf_r+0x154>
 8002fcc:	9005      	str	r0, [sp, #20]
 8002fce:	e7c3      	b.n	8002f58 <_vfiprintf_r+0x154>
 8002fd0:	fb05 2000 	mla	r0, r5, r0, r2
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e7f0      	b.n	8002fba <_vfiprintf_r+0x1b6>
 8002fd8:	ab03      	add	r3, sp, #12
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	4622      	mov	r2, r4
 8002fde:	4b13      	ldr	r3, [pc, #76]	; (800302c <_vfiprintf_r+0x228>)
 8002fe0:	a904      	add	r1, sp, #16
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	f3af 8000 	nop.w
 8002fe8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002fec:	4681      	mov	r9, r0
 8002fee:	d1d8      	bne.n	8002fa2 <_vfiprintf_r+0x19e>
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	065b      	lsls	r3, r3, #25
 8002ff4:	f53f af7d 	bmi.w	8002ef2 <_vfiprintf_r+0xee>
 8002ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ffa:	e77c      	b.n	8002ef6 <_vfiprintf_r+0xf2>
 8002ffc:	ab03      	add	r3, sp, #12
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	4622      	mov	r2, r4
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <_vfiprintf_r+0x228>)
 8003004:	a904      	add	r1, sp, #16
 8003006:	4630      	mov	r0, r6
 8003008:	f000 f888 	bl	800311c <_printf_i>
 800300c:	e7ec      	b.n	8002fe8 <_vfiprintf_r+0x1e4>
 800300e:	bf00      	nop
 8003010:	08003564 	.word	0x08003564
 8003014:	080035a4 	.word	0x080035a4
 8003018:	08003584 	.word	0x08003584
 800301c:	08003544 	.word	0x08003544
 8003020:	080035aa 	.word	0x080035aa
 8003024:	080035ae 	.word	0x080035ae
 8003028:	00000000 	.word	0x00000000
 800302c:	08002de1 	.word	0x08002de1

08003030 <_printf_common>:
 8003030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003034:	4691      	mov	r9, r2
 8003036:	461f      	mov	r7, r3
 8003038:	688a      	ldr	r2, [r1, #8]
 800303a:	690b      	ldr	r3, [r1, #16]
 800303c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003040:	4293      	cmp	r3, r2
 8003042:	bfb8      	it	lt
 8003044:	4613      	movlt	r3, r2
 8003046:	f8c9 3000 	str.w	r3, [r9]
 800304a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800304e:	4606      	mov	r6, r0
 8003050:	460c      	mov	r4, r1
 8003052:	b112      	cbz	r2, 800305a <_printf_common+0x2a>
 8003054:	3301      	adds	r3, #1
 8003056:	f8c9 3000 	str.w	r3, [r9]
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	0699      	lsls	r1, r3, #26
 800305e:	bf42      	ittt	mi
 8003060:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003064:	3302      	addmi	r3, #2
 8003066:	f8c9 3000 	strmi.w	r3, [r9]
 800306a:	6825      	ldr	r5, [r4, #0]
 800306c:	f015 0506 	ands.w	r5, r5, #6
 8003070:	d107      	bne.n	8003082 <_printf_common+0x52>
 8003072:	f104 0a19 	add.w	sl, r4, #25
 8003076:	68e3      	ldr	r3, [r4, #12]
 8003078:	f8d9 2000 	ldr.w	r2, [r9]
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	429d      	cmp	r5, r3
 8003080:	db29      	blt.n	80030d6 <_printf_common+0xa6>
 8003082:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003086:	6822      	ldr	r2, [r4, #0]
 8003088:	3300      	adds	r3, #0
 800308a:	bf18      	it	ne
 800308c:	2301      	movne	r3, #1
 800308e:	0692      	lsls	r2, r2, #26
 8003090:	d42e      	bmi.n	80030f0 <_printf_common+0xc0>
 8003092:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003096:	4639      	mov	r1, r7
 8003098:	4630      	mov	r0, r6
 800309a:	47c0      	blx	r8
 800309c:	3001      	adds	r0, #1
 800309e:	d021      	beq.n	80030e4 <_printf_common+0xb4>
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	68e5      	ldr	r5, [r4, #12]
 80030a4:	f8d9 2000 	ldr.w	r2, [r9]
 80030a8:	f003 0306 	and.w	r3, r3, #6
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	bf08      	it	eq
 80030b0:	1aad      	subeq	r5, r5, r2
 80030b2:	68a3      	ldr	r3, [r4, #8]
 80030b4:	6922      	ldr	r2, [r4, #16]
 80030b6:	bf0c      	ite	eq
 80030b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030bc:	2500      	movne	r5, #0
 80030be:	4293      	cmp	r3, r2
 80030c0:	bfc4      	itt	gt
 80030c2:	1a9b      	subgt	r3, r3, r2
 80030c4:	18ed      	addgt	r5, r5, r3
 80030c6:	f04f 0900 	mov.w	r9, #0
 80030ca:	341a      	adds	r4, #26
 80030cc:	454d      	cmp	r5, r9
 80030ce:	d11b      	bne.n	8003108 <_printf_common+0xd8>
 80030d0:	2000      	movs	r0, #0
 80030d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d6:	2301      	movs	r3, #1
 80030d8:	4652      	mov	r2, sl
 80030da:	4639      	mov	r1, r7
 80030dc:	4630      	mov	r0, r6
 80030de:	47c0      	blx	r8
 80030e0:	3001      	adds	r0, #1
 80030e2:	d103      	bne.n	80030ec <_printf_common+0xbc>
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ec:	3501      	adds	r5, #1
 80030ee:	e7c2      	b.n	8003076 <_printf_common+0x46>
 80030f0:	18e1      	adds	r1, r4, r3
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	2030      	movs	r0, #48	; 0x30
 80030f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030fa:	4422      	add	r2, r4
 80030fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003104:	3302      	adds	r3, #2
 8003106:	e7c4      	b.n	8003092 <_printf_common+0x62>
 8003108:	2301      	movs	r3, #1
 800310a:	4622      	mov	r2, r4
 800310c:	4639      	mov	r1, r7
 800310e:	4630      	mov	r0, r6
 8003110:	47c0      	blx	r8
 8003112:	3001      	adds	r0, #1
 8003114:	d0e6      	beq.n	80030e4 <_printf_common+0xb4>
 8003116:	f109 0901 	add.w	r9, r9, #1
 800311a:	e7d7      	b.n	80030cc <_printf_common+0x9c>

0800311c <_printf_i>:
 800311c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003120:	4617      	mov	r7, r2
 8003122:	7e0a      	ldrb	r2, [r1, #24]
 8003124:	b085      	sub	sp, #20
 8003126:	2a6e      	cmp	r2, #110	; 0x6e
 8003128:	4698      	mov	r8, r3
 800312a:	4606      	mov	r6, r0
 800312c:	460c      	mov	r4, r1
 800312e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003130:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003134:	f000 80bc 	beq.w	80032b0 <_printf_i+0x194>
 8003138:	d81a      	bhi.n	8003170 <_printf_i+0x54>
 800313a:	2a63      	cmp	r2, #99	; 0x63
 800313c:	d02e      	beq.n	800319c <_printf_i+0x80>
 800313e:	d80a      	bhi.n	8003156 <_printf_i+0x3a>
 8003140:	2a00      	cmp	r2, #0
 8003142:	f000 80c8 	beq.w	80032d6 <_printf_i+0x1ba>
 8003146:	2a58      	cmp	r2, #88	; 0x58
 8003148:	f000 808a 	beq.w	8003260 <_printf_i+0x144>
 800314c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003150:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003154:	e02a      	b.n	80031ac <_printf_i+0x90>
 8003156:	2a64      	cmp	r2, #100	; 0x64
 8003158:	d001      	beq.n	800315e <_printf_i+0x42>
 800315a:	2a69      	cmp	r2, #105	; 0x69
 800315c:	d1f6      	bne.n	800314c <_printf_i+0x30>
 800315e:	6821      	ldr	r1, [r4, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003166:	d023      	beq.n	80031b0 <_printf_i+0x94>
 8003168:	1d11      	adds	r1, r2, #4
 800316a:	6019      	str	r1, [r3, #0]
 800316c:	6813      	ldr	r3, [r2, #0]
 800316e:	e027      	b.n	80031c0 <_printf_i+0xa4>
 8003170:	2a73      	cmp	r2, #115	; 0x73
 8003172:	f000 80b4 	beq.w	80032de <_printf_i+0x1c2>
 8003176:	d808      	bhi.n	800318a <_printf_i+0x6e>
 8003178:	2a6f      	cmp	r2, #111	; 0x6f
 800317a:	d02a      	beq.n	80031d2 <_printf_i+0xb6>
 800317c:	2a70      	cmp	r2, #112	; 0x70
 800317e:	d1e5      	bne.n	800314c <_printf_i+0x30>
 8003180:	680a      	ldr	r2, [r1, #0]
 8003182:	f042 0220 	orr.w	r2, r2, #32
 8003186:	600a      	str	r2, [r1, #0]
 8003188:	e003      	b.n	8003192 <_printf_i+0x76>
 800318a:	2a75      	cmp	r2, #117	; 0x75
 800318c:	d021      	beq.n	80031d2 <_printf_i+0xb6>
 800318e:	2a78      	cmp	r2, #120	; 0x78
 8003190:	d1dc      	bne.n	800314c <_printf_i+0x30>
 8003192:	2278      	movs	r2, #120	; 0x78
 8003194:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003198:	496e      	ldr	r1, [pc, #440]	; (8003354 <_printf_i+0x238>)
 800319a:	e064      	b.n	8003266 <_printf_i+0x14a>
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80031a2:	1d11      	adds	r1, r2, #4
 80031a4:	6019      	str	r1, [r3, #0]
 80031a6:	6813      	ldr	r3, [r2, #0]
 80031a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0a3      	b.n	80032f8 <_printf_i+0x1dc>
 80031b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80031b4:	f102 0104 	add.w	r1, r2, #4
 80031b8:	6019      	str	r1, [r3, #0]
 80031ba:	d0d7      	beq.n	800316c <_printf_i+0x50>
 80031bc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	da03      	bge.n	80031cc <_printf_i+0xb0>
 80031c4:	222d      	movs	r2, #45	; 0x2d
 80031c6:	425b      	negs	r3, r3
 80031c8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80031cc:	4962      	ldr	r1, [pc, #392]	; (8003358 <_printf_i+0x23c>)
 80031ce:	220a      	movs	r2, #10
 80031d0:	e017      	b.n	8003202 <_printf_i+0xe6>
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	6819      	ldr	r1, [r3, #0]
 80031d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80031da:	d003      	beq.n	80031e4 <_printf_i+0xc8>
 80031dc:	1d08      	adds	r0, r1, #4
 80031de:	6018      	str	r0, [r3, #0]
 80031e0:	680b      	ldr	r3, [r1, #0]
 80031e2:	e006      	b.n	80031f2 <_printf_i+0xd6>
 80031e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031e8:	f101 0004 	add.w	r0, r1, #4
 80031ec:	6018      	str	r0, [r3, #0]
 80031ee:	d0f7      	beq.n	80031e0 <_printf_i+0xc4>
 80031f0:	880b      	ldrh	r3, [r1, #0]
 80031f2:	4959      	ldr	r1, [pc, #356]	; (8003358 <_printf_i+0x23c>)
 80031f4:	2a6f      	cmp	r2, #111	; 0x6f
 80031f6:	bf14      	ite	ne
 80031f8:	220a      	movne	r2, #10
 80031fa:	2208      	moveq	r2, #8
 80031fc:	2000      	movs	r0, #0
 80031fe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003202:	6865      	ldr	r5, [r4, #4]
 8003204:	60a5      	str	r5, [r4, #8]
 8003206:	2d00      	cmp	r5, #0
 8003208:	f2c0 809c 	blt.w	8003344 <_printf_i+0x228>
 800320c:	6820      	ldr	r0, [r4, #0]
 800320e:	f020 0004 	bic.w	r0, r0, #4
 8003212:	6020      	str	r0, [r4, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d13f      	bne.n	8003298 <_printf_i+0x17c>
 8003218:	2d00      	cmp	r5, #0
 800321a:	f040 8095 	bne.w	8003348 <_printf_i+0x22c>
 800321e:	4675      	mov	r5, lr
 8003220:	2a08      	cmp	r2, #8
 8003222:	d10b      	bne.n	800323c <_printf_i+0x120>
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	07da      	lsls	r2, r3, #31
 8003228:	d508      	bpl.n	800323c <_printf_i+0x120>
 800322a:	6923      	ldr	r3, [r4, #16]
 800322c:	6862      	ldr	r2, [r4, #4]
 800322e:	429a      	cmp	r2, r3
 8003230:	bfde      	ittt	le
 8003232:	2330      	movle	r3, #48	; 0x30
 8003234:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003238:	f105 35ff 	addle.w	r5, r5, #4294967295
 800323c:	ebae 0305 	sub.w	r3, lr, r5
 8003240:	6123      	str	r3, [r4, #16]
 8003242:	f8cd 8000 	str.w	r8, [sp]
 8003246:	463b      	mov	r3, r7
 8003248:	aa03      	add	r2, sp, #12
 800324a:	4621      	mov	r1, r4
 800324c:	4630      	mov	r0, r6
 800324e:	f7ff feef 	bl	8003030 <_printf_common>
 8003252:	3001      	adds	r0, #1
 8003254:	d155      	bne.n	8003302 <_printf_i+0x1e6>
 8003256:	f04f 30ff 	mov.w	r0, #4294967295
 800325a:	b005      	add	sp, #20
 800325c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003260:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003264:	493c      	ldr	r1, [pc, #240]	; (8003358 <_printf_i+0x23c>)
 8003266:	6822      	ldr	r2, [r4, #0]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800326e:	f100 0504 	add.w	r5, r0, #4
 8003272:	601d      	str	r5, [r3, #0]
 8003274:	d001      	beq.n	800327a <_printf_i+0x15e>
 8003276:	6803      	ldr	r3, [r0, #0]
 8003278:	e002      	b.n	8003280 <_printf_i+0x164>
 800327a:	0655      	lsls	r5, r2, #25
 800327c:	d5fb      	bpl.n	8003276 <_printf_i+0x15a>
 800327e:	8803      	ldrh	r3, [r0, #0]
 8003280:	07d0      	lsls	r0, r2, #31
 8003282:	bf44      	itt	mi
 8003284:	f042 0220 	orrmi.w	r2, r2, #32
 8003288:	6022      	strmi	r2, [r4, #0]
 800328a:	b91b      	cbnz	r3, 8003294 <_printf_i+0x178>
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	f022 0220 	bic.w	r2, r2, #32
 8003292:	6022      	str	r2, [r4, #0]
 8003294:	2210      	movs	r2, #16
 8003296:	e7b1      	b.n	80031fc <_printf_i+0xe0>
 8003298:	4675      	mov	r5, lr
 800329a:	fbb3 f0f2 	udiv	r0, r3, r2
 800329e:	fb02 3310 	mls	r3, r2, r0, r3
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80032a8:	4603      	mov	r3, r0
 80032aa:	2800      	cmp	r0, #0
 80032ac:	d1f5      	bne.n	800329a <_printf_i+0x17e>
 80032ae:	e7b7      	b.n	8003220 <_printf_i+0x104>
 80032b0:	6808      	ldr	r0, [r1, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	6949      	ldr	r1, [r1, #20]
 80032b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80032ba:	d004      	beq.n	80032c6 <_printf_i+0x1aa>
 80032bc:	1d10      	adds	r0, r2, #4
 80032be:	6018      	str	r0, [r3, #0]
 80032c0:	6813      	ldr	r3, [r2, #0]
 80032c2:	6019      	str	r1, [r3, #0]
 80032c4:	e007      	b.n	80032d6 <_printf_i+0x1ba>
 80032c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032ca:	f102 0004 	add.w	r0, r2, #4
 80032ce:	6018      	str	r0, [r3, #0]
 80032d0:	6813      	ldr	r3, [r2, #0]
 80032d2:	d0f6      	beq.n	80032c2 <_printf_i+0x1a6>
 80032d4:	8019      	strh	r1, [r3, #0]
 80032d6:	2300      	movs	r3, #0
 80032d8:	6123      	str	r3, [r4, #16]
 80032da:	4675      	mov	r5, lr
 80032dc:	e7b1      	b.n	8003242 <_printf_i+0x126>
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	1d11      	adds	r1, r2, #4
 80032e2:	6019      	str	r1, [r3, #0]
 80032e4:	6815      	ldr	r5, [r2, #0]
 80032e6:	6862      	ldr	r2, [r4, #4]
 80032e8:	2100      	movs	r1, #0
 80032ea:	4628      	mov	r0, r5
 80032ec:	f7fc ff80 	bl	80001f0 <memchr>
 80032f0:	b108      	cbz	r0, 80032f6 <_printf_i+0x1da>
 80032f2:	1b40      	subs	r0, r0, r5
 80032f4:	6060      	str	r0, [r4, #4]
 80032f6:	6863      	ldr	r3, [r4, #4]
 80032f8:	6123      	str	r3, [r4, #16]
 80032fa:	2300      	movs	r3, #0
 80032fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003300:	e79f      	b.n	8003242 <_printf_i+0x126>
 8003302:	6923      	ldr	r3, [r4, #16]
 8003304:	462a      	mov	r2, r5
 8003306:	4639      	mov	r1, r7
 8003308:	4630      	mov	r0, r6
 800330a:	47c0      	blx	r8
 800330c:	3001      	adds	r0, #1
 800330e:	d0a2      	beq.n	8003256 <_printf_i+0x13a>
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	079b      	lsls	r3, r3, #30
 8003314:	d507      	bpl.n	8003326 <_printf_i+0x20a>
 8003316:	2500      	movs	r5, #0
 8003318:	f104 0919 	add.w	r9, r4, #25
 800331c:	68e3      	ldr	r3, [r4, #12]
 800331e:	9a03      	ldr	r2, [sp, #12]
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	429d      	cmp	r5, r3
 8003324:	db05      	blt.n	8003332 <_printf_i+0x216>
 8003326:	68e0      	ldr	r0, [r4, #12]
 8003328:	9b03      	ldr	r3, [sp, #12]
 800332a:	4298      	cmp	r0, r3
 800332c:	bfb8      	it	lt
 800332e:	4618      	movlt	r0, r3
 8003330:	e793      	b.n	800325a <_printf_i+0x13e>
 8003332:	2301      	movs	r3, #1
 8003334:	464a      	mov	r2, r9
 8003336:	4639      	mov	r1, r7
 8003338:	4630      	mov	r0, r6
 800333a:	47c0      	blx	r8
 800333c:	3001      	adds	r0, #1
 800333e:	d08a      	beq.n	8003256 <_printf_i+0x13a>
 8003340:	3501      	adds	r5, #1
 8003342:	e7eb      	b.n	800331c <_printf_i+0x200>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1a7      	bne.n	8003298 <_printf_i+0x17c>
 8003348:	780b      	ldrb	r3, [r1, #0]
 800334a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800334e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003352:	e765      	b.n	8003220 <_printf_i+0x104>
 8003354:	080035c6 	.word	0x080035c6
 8003358:	080035b5 	.word	0x080035b5

0800335c <_sbrk_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	4c06      	ldr	r4, [pc, #24]	; (8003378 <_sbrk_r+0x1c>)
 8003360:	2300      	movs	r3, #0
 8003362:	4605      	mov	r5, r0
 8003364:	4608      	mov	r0, r1
 8003366:	6023      	str	r3, [r4, #0]
 8003368:	f7ff f8b2 	bl	80024d0 <_sbrk>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d102      	bne.n	8003376 <_sbrk_r+0x1a>
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	b103      	cbz	r3, 8003376 <_sbrk_r+0x1a>
 8003374:	602b      	str	r3, [r5, #0]
 8003376:	bd38      	pop	{r3, r4, r5, pc}
 8003378:	2000048c 	.word	0x2000048c

0800337c <__sread>:
 800337c:	b510      	push	{r4, lr}
 800337e:	460c      	mov	r4, r1
 8003380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003384:	f000 f896 	bl	80034b4 <_read_r>
 8003388:	2800      	cmp	r0, #0
 800338a:	bfab      	itete	ge
 800338c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800338e:	89a3      	ldrhlt	r3, [r4, #12]
 8003390:	181b      	addge	r3, r3, r0
 8003392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003396:	bfac      	ite	ge
 8003398:	6563      	strge	r3, [r4, #84]	; 0x54
 800339a:	81a3      	strhlt	r3, [r4, #12]
 800339c:	bd10      	pop	{r4, pc}

0800339e <__swrite>:
 800339e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033a2:	461f      	mov	r7, r3
 80033a4:	898b      	ldrh	r3, [r1, #12]
 80033a6:	05db      	lsls	r3, r3, #23
 80033a8:	4605      	mov	r5, r0
 80033aa:	460c      	mov	r4, r1
 80033ac:	4616      	mov	r6, r2
 80033ae:	d505      	bpl.n	80033bc <__swrite+0x1e>
 80033b0:	2302      	movs	r3, #2
 80033b2:	2200      	movs	r2, #0
 80033b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033b8:	f000 f868 	bl	800348c <_lseek_r>
 80033bc:	89a3      	ldrh	r3, [r4, #12]
 80033be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033c6:	81a3      	strh	r3, [r4, #12]
 80033c8:	4632      	mov	r2, r6
 80033ca:	463b      	mov	r3, r7
 80033cc:	4628      	mov	r0, r5
 80033ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033d2:	f000 b817 	b.w	8003404 <_write_r>

080033d6 <__sseek>:
 80033d6:	b510      	push	{r4, lr}
 80033d8:	460c      	mov	r4, r1
 80033da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033de:	f000 f855 	bl	800348c <_lseek_r>
 80033e2:	1c43      	adds	r3, r0, #1
 80033e4:	89a3      	ldrh	r3, [r4, #12]
 80033e6:	bf15      	itete	ne
 80033e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80033ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80033ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033f2:	81a3      	strheq	r3, [r4, #12]
 80033f4:	bf18      	it	ne
 80033f6:	81a3      	strhne	r3, [r4, #12]
 80033f8:	bd10      	pop	{r4, pc}

080033fa <__sclose>:
 80033fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033fe:	f000 b813 	b.w	8003428 <_close_r>
	...

08003404 <_write_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4c07      	ldr	r4, [pc, #28]	; (8003424 <_write_r+0x20>)
 8003408:	4605      	mov	r5, r0
 800340a:	4608      	mov	r0, r1
 800340c:	4611      	mov	r1, r2
 800340e:	2200      	movs	r2, #0
 8003410:	6022      	str	r2, [r4, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	f7ff f84e 	bl	80024b4 <_write>
 8003418:	1c43      	adds	r3, r0, #1
 800341a:	d102      	bne.n	8003422 <_write_r+0x1e>
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	b103      	cbz	r3, 8003422 <_write_r+0x1e>
 8003420:	602b      	str	r3, [r5, #0]
 8003422:	bd38      	pop	{r3, r4, r5, pc}
 8003424:	2000048c 	.word	0x2000048c

08003428 <_close_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	4c06      	ldr	r4, [pc, #24]	; (8003444 <_close_r+0x1c>)
 800342c:	2300      	movs	r3, #0
 800342e:	4605      	mov	r5, r0
 8003430:	4608      	mov	r0, r1
 8003432:	6023      	str	r3, [r4, #0]
 8003434:	f7ff f866 	bl	8002504 <_close>
 8003438:	1c43      	adds	r3, r0, #1
 800343a:	d102      	bne.n	8003442 <_close_r+0x1a>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	b103      	cbz	r3, 8003442 <_close_r+0x1a>
 8003440:	602b      	str	r3, [r5, #0]
 8003442:	bd38      	pop	{r3, r4, r5, pc}
 8003444:	2000048c 	.word	0x2000048c

08003448 <_fstat_r>:
 8003448:	b538      	push	{r3, r4, r5, lr}
 800344a:	4c07      	ldr	r4, [pc, #28]	; (8003468 <_fstat_r+0x20>)
 800344c:	2300      	movs	r3, #0
 800344e:	4605      	mov	r5, r0
 8003450:	4608      	mov	r0, r1
 8003452:	4611      	mov	r1, r2
 8003454:	6023      	str	r3, [r4, #0]
 8003456:	f7ff f858 	bl	800250a <_fstat>
 800345a:	1c43      	adds	r3, r0, #1
 800345c:	d102      	bne.n	8003464 <_fstat_r+0x1c>
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	b103      	cbz	r3, 8003464 <_fstat_r+0x1c>
 8003462:	602b      	str	r3, [r5, #0]
 8003464:	bd38      	pop	{r3, r4, r5, pc}
 8003466:	bf00      	nop
 8003468:	2000048c 	.word	0x2000048c

0800346c <_isatty_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	4c06      	ldr	r4, [pc, #24]	; (8003488 <_isatty_r+0x1c>)
 8003470:	2300      	movs	r3, #0
 8003472:	4605      	mov	r5, r0
 8003474:	4608      	mov	r0, r1
 8003476:	6023      	str	r3, [r4, #0]
 8003478:	f7ff f84c 	bl	8002514 <_isatty>
 800347c:	1c43      	adds	r3, r0, #1
 800347e:	d102      	bne.n	8003486 <_isatty_r+0x1a>
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	b103      	cbz	r3, 8003486 <_isatty_r+0x1a>
 8003484:	602b      	str	r3, [r5, #0]
 8003486:	bd38      	pop	{r3, r4, r5, pc}
 8003488:	2000048c 	.word	0x2000048c

0800348c <_lseek_r>:
 800348c:	b538      	push	{r3, r4, r5, lr}
 800348e:	4c07      	ldr	r4, [pc, #28]	; (80034ac <_lseek_r+0x20>)
 8003490:	4605      	mov	r5, r0
 8003492:	4608      	mov	r0, r1
 8003494:	4611      	mov	r1, r2
 8003496:	2200      	movs	r2, #0
 8003498:	6022      	str	r2, [r4, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	f7ff f83c 	bl	8002518 <_lseek>
 80034a0:	1c43      	adds	r3, r0, #1
 80034a2:	d102      	bne.n	80034aa <_lseek_r+0x1e>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	b103      	cbz	r3, 80034aa <_lseek_r+0x1e>
 80034a8:	602b      	str	r3, [r5, #0]
 80034aa:	bd38      	pop	{r3, r4, r5, pc}
 80034ac:	2000048c 	.word	0x2000048c

080034b0 <__malloc_lock>:
 80034b0:	4770      	bx	lr

080034b2 <__malloc_unlock>:
 80034b2:	4770      	bx	lr

080034b4 <_read_r>:
 80034b4:	b538      	push	{r3, r4, r5, lr}
 80034b6:	4c07      	ldr	r4, [pc, #28]	; (80034d4 <_read_r+0x20>)
 80034b8:	4605      	mov	r5, r0
 80034ba:	4608      	mov	r0, r1
 80034bc:	4611      	mov	r1, r2
 80034be:	2200      	movs	r2, #0
 80034c0:	6022      	str	r2, [r4, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	f7fe ffe8 	bl	8002498 <_read>
 80034c8:	1c43      	adds	r3, r0, #1
 80034ca:	d102      	bne.n	80034d2 <_read_r+0x1e>
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	b103      	cbz	r3, 80034d2 <_read_r+0x1e>
 80034d0:	602b      	str	r3, [r5, #0]
 80034d2:	bd38      	pop	{r3, r4, r5, pc}
 80034d4:	2000048c 	.word	0x2000048c

080034d8 <_init>:
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034da:	bf00      	nop
 80034dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034de:	bc08      	pop	{r3}
 80034e0:	469e      	mov	lr, r3
 80034e2:	4770      	bx	lr

080034e4 <_fini>:
 80034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e6:	bf00      	nop
 80034e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ea:	bc08      	pop	{r3}
 80034ec:	469e      	mov	lr, r3
 80034ee:	4770      	bx	lr
