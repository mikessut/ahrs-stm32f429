##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.4.0] date: [Wed Oct 02 10:06:10 MDT 2019]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = ahrs-stm32f429


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build
EIGEN_INCLUDE_DIR = /usr/include/eigen3

######################################
# source
######################################
# C sources
C_SOURCES =  \
Src/gps.c \
Src/utils.c \
Src/canfix.c \
Src/pressure.c \
Src/lis3mdl.c \
Src/lsm6ds33.c \
Src/stm32f4xx_hal_msp.c \
Src/stm32f4xx_it.c \
Src/syscalls.c \
Src/system_stm32f4xx.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2c.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2c_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c

CPP_SOURCES = \
Src/main.cpp \
Src/kalman.cpp 

# ASM sources
ASM_SOURCES =  \
startup_stm32f427xx.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)g++
CXX = $(PREFIX)g++
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
LD = $(PREFIX)g++
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS =

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F427xx \
-DUSE_HAL_DRIVER \
-DSTM32F427xx


# AS includes
AS_INCLUDES =

# C includes
C_INCLUDES =  \
-IInc \
-IDrivers/STM32F4xx_HAL_Driver/Inc \
-IDrivers/STM32F4xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32F4xx/Include \
-IDrivers/CMSIS/Include \
-IDrivers/CMSIS/Include


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections -I$(EIGEN_INCLUDE_DIR)

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F427VITx_FLASH.ld
LDSCRIPT_BOOTLOADER = STM32F427VITx_FLASH_bootloader.ld

# libraries
LIBS = -lc -lm -lnosys
LIBDIR =
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) \
-Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections -specs=nosys.specs \
-u _printf_float

LDFLAGS_BOOTLOADER = $(MCU) -specs=nano.specs -T$(LDSCRIPT_BOOTLOADER) $(LIBDIR) $(LIBS) \
-Wl,-Map=$(BUILD_DIR)/bootloader.map,--cref -Wl,--gc-sections -specs=nosys.specs \
-u _printf_float

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################

# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.cpp.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(info $$objects is [${OBJECTS}])
$(info $$vpath is [${vpath}])

$(BUILD_DIR)/%.cpp.o: %.cpp Makefile | $(BUILD_DIR)
	echo "new c++ rule for " $@
	$(CXX) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	echo "c rule for " $@
	$(CC) -c $(CFLAGS) -DVECT_TAB_OFFSET=0x20000 -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(LD) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@

$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@

$(BUILD_DIR):
	mkdir $@

#######################################
# Compile Kalman cpp code to run through python. (This doesn't
# run on STM32. Only for debugging on build machine.)
#######################################

build/kalman_pic.o: Src/kalman.cpp
	g++ $(CPPFLAGS) -I$(EIGEN_INCLUDE_DIR) -IInc -c -fpic Src/kalman.cpp -o build/kalman_pic.o

python: build/kalman_pic.o
	g++ $(CPPFLAGS) -ISrc -I$(EIGEN_INCLUDE_DIR) -IInc -c -fpic kalman_python_wrapper.cpp -o build/kalman_python_wrapper.o
	g++ -shared -o build/libkalman.so build/kalman_python_wrapper.o build/kalman_pic.o

# Bootloader

BOOTLOADER_OBJS = \
build/bootloader.o \
build/startup_stm32f427xx.o \
build/stm32f4xx_hal_can.o  \
build/stm32f4xx_hal.o \
build/stm32f4xx_hal_rcc.o \
build/stm32f4xx_hal_flash.o \
build/stm32f4xx_hal_flash_ex.o \
build/stm32f4xx_hal_gpio.o \
build/stm32f4xx_hal_pwr_ex.o \
build/stm32f4xx_hal_cortex.o \
build/system_stm32f4xx_bootloader.o \
build/stm32f4xx_hal_msp.o \
build/stm32f4xx_it.o \
build/syscalls.o \

bootloader: $(BUILD_DIR)/bootloader.elf $(BUILD_DIR)/bootloader.hex $(BUILD_DIR)/bootloader.bin
	echo "default"

# $(BUILD_DIR)/bootloader.o: Src/bootloader.c
# 	#$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=build/bootloader.c Src/bootloader.c -o build/bootloader.o
# 	echo "bootloader.o"
# 	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

# -DVECT_TAB_OFFSET=0x800
build/system_stm32f4xx_bootloader.o:
	$(CC) -c $(CFLAGS) -DVECT_TAB_OFFSET=0x00 -Wa,-a,-ad,-alms=build/system_stm32f4xx_bootloader.lst Src/system_stm32f4xx.c -o build/system_stm32f4xx_bootloader.o

$(BUILD_DIR)/bootloader.elf: $(BOOTLOADER_OBJS) Makefile
	echo "bootloader linking"
	$(LD) $(BOOTLOADER_OBJS) $(LDFLAGS_BOOTLOADER) -o $@
	$(SZ) $@

$(BUILD_DIR)/bootloader.hex: $(BUILD_DIR)/bootloader.elf | $(BUILD_DIR)
	echo "bootloader hex"
	$(HEX) $< $@

$(BUILD_DIR)/bootloader.bin: $(BUILD_DIR)/bootloader.elf | $(BUILD_DIR)
	echo "bootloader bin"
	$(BIN) $< $@	

#######################################
# clean up
#######################################
clean:
	#del /f $(BUILD_DIR)
	rm -fR $(BUILD_DIR)


#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
